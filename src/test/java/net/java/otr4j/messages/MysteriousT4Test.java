/*
 * otr4j, the open source java otr library.
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 *
 * SPDX-License-Identifier: LGPL-3.0-only
 */

package net.java.otr4j.messages;

import net.java.otr4j.api.InstanceTag;
import net.java.otr4j.crypto.OtrCryptoEngine4;
import net.java.otr4j.crypto.OtrCryptoException;
import net.java.otr4j.crypto.ed448.Point;
import net.java.otr4j.io.OtrInputStream;
import org.junit.Test;

import java.math.BigInteger;
import java.net.ProtocolException;

import static net.java.otr4j.api.InstanceTag.ZERO_TAG;
import static net.java.otr4j.messages.MysteriousT4.generatePhi;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertTrue;

@SuppressWarnings("ConstantConditions")
public class MysteriousT4Test {

    private static final Point SENDER_FIRST_ECDH_PUBLIC_KEY;
    private static final BigInteger SENDER_FIRST_DH_PUBLIC_KEY;
    private static final Point RECEIVER_FIRST_ECDH_PUBLIC_KEY;
    private static final BigInteger RECEIVER_FIRST_DH_PUBLIC_KEY;

    static {
        try {
            SENDER_FIRST_ECDH_PUBLIC_KEY = new OtrInputStream(new byte[] {121, -7, 68, -101, 103, -4, 38, -115, 109, 22, -100, 58, 3, 8, 16, 47, 115, 118, -121, 0, 104, -119, 2, -124, 32, 126, 123, -118, 10, 93, -27, -109, -125, -83, -52, -106, 123, -124, -22, 19, -111, 126, -92, -73, -72, 92, 24, 106, -86, 89, -90, 81, -101, 107, 23, -117, 0}).readPoint();
            SENDER_FIRST_DH_PUBLIC_KEY = new OtrInputStream(new byte[] {0, 0, 1, -128, 81, -15, -3, -7, 17, 32, 107, -58, 78, 78, -66, -122, 23, -58, -107, -122, 35, -31, -73, -99, 19, 69, 21, 63, 6, -16, 114, -43, -16, 15, 77, -11, 90, -31, -46, -29, 29, 43, 9, 87, -100, -124, -37, -127, 3, -7, -2, 2, -15, -119, 126, 64, -3, 1, -47, -24, 43, -44, 61, 122, 95, 77, 90, -67, -116, -88, 71, 93, 82, 72, 76, -8, 76, -112, 44, -54, 18, 31, -68, -79, 103, -58, 95, 36, -86, -115, 66, -82, 50, 111, -70, -2, 24, -24, 83, -16, 29, 110, -7, -10, 34, -74, -25, -33, 97, -124, -3, -49, 7, 98, -24, 96, -93, 110, -18, 89, 40, -50, 102, -3, -22, -63, 126, 44, -59, 37, 118, 26, 29, -40, 30, 66, 54, 92, -76, -65, -40, 33, -89, -99, -43, -88, 0, 68, -61, 104, 119, 94, -99, -84, -53, 62, 8, -38, -16, 109, -122, 37, -47, 75, 109, 12, -99, 30, 60, 110, -46, 68, -85, -61, 79, 27, 106, -22, -31, -121, 69, 22, -57, -23, 111, -6, 116, 49, -87, 26, -124, -127, 65, -122, 101, 76, 20, 32, 63, 72, -14, 17, -1, -8, 71, -55, 123, -122, 90, -28, 63, 36, 82, -26, 43, 69, -97, 127, -41, 34, 77, -33, -66, 57, -116, -47, -80, 94, 63, -128, 72, -58, 64, 28, 14, 101, -98, -21, -48, 116, 34, 54, -101, 80, 19, 78, 59, -2, -61, -79, -61, -56, -60, 101, 122, -37, 68, 17, 7, -27, 124, 2, 13, -126, -39, -10, 63, -29, 76, -5, -45, 35, -71, -3, 62, 19, 75, 38, -59, -90, -91, 117, 77, 93, 57, 99, -72, 84, -82, -100, -36, -1, 44, -4, -26, -61, 79, -54, 115, -68, 21, 81, -54, -68, -25, 124, -93, -85, 119, -23, 12, -2, 10, 33, -84, -85, -23, -64, -68, 86, 91, 73, -91, 111, 119, -93, -110, 62, -11, -81, 89, -108, -10, 115, 63, 74, 69, -49, 11, -30, 92, 105, 23, 39, -109, 37, -120, 30, 108, 4, -19, -100, -33, 39, 57, -67, -110, -122, 58, -70, 9, 1, -23, -10, -95, 52, -128, -36, -113, -81, 57, -26, -18, -96, -3, -7, -82, -28, 24, 90, 58, 49, -83, -62, -58, -98, 27, 45}).readBigInt();
            RECEIVER_FIRST_ECDH_PUBLIC_KEY = new OtrInputStream(new byte[] {111, -53, -103, 12, -9, 14, -35, -65, 36, -59, -66, -93, 99, -6, -26, -71, -61, 95, 114, 72, 110, 12, -48, -71, 93, 80, 102, 64, -54, 100, 15, 18, 3, 93, 15, -66, -70, -75, 24, 59, -90, 18, -11, -125, 54, 7, 54, 86, 85, 122, -5, -84, -89, 77, 69, 83, 0}).readPoint();
            RECEIVER_FIRST_DH_PUBLIC_KEY = new OtrInputStream(new byte[] {0, 0, 1, -128, 72, -85, 19, -71, 83, 71, 29, 63, -23, 104, -83, 6, -97, 73, -40, -25, -47, 53, 7, -91, -20, 8, -124, 41, -52, 120, 120, 108, 105, -34, -79, 82, 92, -68, 70, 28, 124, 96, -48, -125, -116, 119, 53, -19, -97, 101, -68, -63, -27, 8, 4, 86, -4, 56, 81, 48, -4, 21, -33, 98, -64, -95, 12, -94, 15, 48, 77, 47, 26, 57, 2, 113, 99, -88, -111, -57, -41, 125, -101, -70, -16, 34, 15, 95, 74, -30, -24, -56, 86, -93, -99, 94, -29, 30, -119, 56, 4, -45, -19, -9, -79, 52, 103, -33, -82, 74, -89, 122, 39, -91, -80, -77, 1, 103, 28, 97, 57, -30, 54, -6, -94, 126, 70, -52, -86, 39, -90, -74, 39, -30, 12, -101, -112, -86, -10, 55, 65, 58, -60, -32, 24, -44, 79, 114, -89, 113, -15, -100, 19, 101, 87, 83, 19, 58, -123, -57, -81, -128, 69, 4, 89, -110, 71, -53, 116, 98, -34, 87, 39, 0, -1, 97, -80, 37, -21, -128, -123, 107, 82, -64, -119, 91, -51, 123, 52, 50, -47, 62, -32, -44, 61, -97, 100, 37, -16, 81, -115, -13, -118, -30, -14, 85, -26, 118, 113, -2, 13, 19, 70, -66, 6, -26, -106, 30, -37, -28, -48, -60, 37, 65, -67, -64, 72, -4, 81, -18, 123, -90, 84, 50, 33, 40, 51, 104, -17, -39, 120, -126, -58, -102, 31, 75, 10, 126, 40, 22, 16, 46, 116, -85, 104, 113, -70, -86, 42, 94, 77, 110, -60, 3, 96, -44, 1, -111, -59, -108, -44, -46, -128, -110, -40, 117, 66, 115, 48, -105, -85, 84, 6, -43, -58, -113, 84, 108, -111, 71, 26, 66, 102, -4, 37, -50, 0, -50, 109, -77, 110, 37, 127, 24, 3, 36, 51, -122, 81, -80, 45, -10, 56, -112, -100, -85, -100, -10, 61, 1, -112, -66, -45, 54, -53, -62, -45, -3, 61, -81, -45, 71, -103, -4, 54, 83, 25, 37, -19, -68, -116, 31, 95, 98, -50, -4, -7, -27, -99, 79, -118, -56, 77, -5, -85, 88, 25, 110, 82, 77, -74, -51, -17, -47, 100, 115, 54, -127, 1, -116, 125, 66, -33, -25, -80, -56, 92, -81, -16, 39, -33, 125, -115, -40, -87, 93, 126, -57}).readBigInt();
        } catch (final OtrCryptoException | ProtocolException e) {
            throw new IllegalStateException("Failed to initialize tests.", e);
        }
    }

    @Test(expected = NullPointerException.class)
    public void testGeneratePhiNullSenderFirstECDHPublicKey() {
        generatePhi(OtrCryptoEngine4.KDFUsage.AUTH_I_PHI, ZERO_TAG, ZERO_TAG, null, SENDER_FIRST_DH_PUBLIC_KEY,
                RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID");
    }

    @Test(expected = NullPointerException.class)
    public void testGeneratePhiNullSenderFirstDHPublicKey() {
        generatePhi(OtrCryptoEngine4.KDFUsage.AUTH_I_PHI, ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, null,
                RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID");
    }

    @Test(expected = NullPointerException.class)
    public void testGeneratePhiNullReceiverFirstECDHPublicKey() {
        generatePhi(OtrCryptoEngine4.KDFUsage.AUTH_I_PHI, ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, null,
                RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID");
    }

    @Test(expected = NullPointerException.class)
    public void testGeneratePhiNullReceiverFirstDHPublicKey() {
        generatePhi(OtrCryptoEngine4.KDFUsage.AUTH_I_PHI, ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY,
                RECEIVER_FIRST_ECDH_PUBLIC_KEY, null, "myContactID", "theirContactID");
    }

    @Test(expected = NullPointerException.class)
    public void testGeneratePhiNullSenderContact() {
        generatePhi(OtrCryptoEngine4.KDFUsage.AUTH_I_PHI, ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY,
                RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, null, "theirContactID");
    }

    @Test(expected = NullPointerException.class)
    public void testGeneratePhiNullReceiverContact() {
        generatePhi(OtrCryptoEngine4.KDFUsage.AUTH_I_PHI, ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY,
                RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", null);
    }

    // FIXME fix tests generatePhi()
    //@Test
    //public void testGeneratePhiExtremeSenderInstanceTagValues() {
    //    assertArrayEquals(new byte[] {127, -1, -1, -1, 0, 0, 0, 0, 121, -7, 68, -101, 103, -4, 38, -115, 109, 22, -100, 58, 3, 8, 16, 47, 115, 118, -121, 0, 104, -119, 2, -124, 32, 126, 123, -118, 10, 93, -27, -109, -125, -83, -52, -106, 123, -124, -22, 19, -111, 126, -92, -73, -72, 92, 24, 106, -86, 89, -90, 81, -101, 107, 23, -117, 0, 0, 0, 1, -128, 81, -15, -3, -7, 17, 32, 107, -58, 78, 78, -66, -122, 23, -58, -107, -122, 35, -31, -73, -99, 19, 69, 21, 63, 6, -16, 114, -43, -16, 15, 77, -11, 90, -31, -46, -29, 29, 43, 9, 87, -100, -124, -37, -127, 3, -7, -2, 2, -15, -119, 126, 64, -3, 1, -47, -24, 43, -44, 61, 122, 95, 77, 90, -67, -116, -88, 71, 93, 82, 72, 76, -8, 76, -112, 44, -54, 18, 31, -68, -79, 103, -58, 95, 36, -86, -115, 66, -82, 50, 111, -70, -2, 24, -24, 83, -16, 29, 110, -7, -10, 34, -74, -25, -33, 97, -124, -3, -49, 7, 98, -24, 96, -93, 110, -18, 89, 40, -50, 102, -3, -22, -63, 126, 44, -59, 37, 118, 26, 29, -40, 30, 66, 54, 92, -76, -65, -40, 33, -89, -99, -43, -88, 0, 68, -61, 104, 119, 94, -99, -84, -53, 62, 8, -38, -16, 109, -122, 37, -47, 75, 109, 12, -99, 30, 60, 110, -46, 68, -85, -61, 79, 27, 106, -22, -31, -121, 69, 22, -57, -23, 111, -6, 116, 49, -87, 26, -124, -127, 65, -122, 101, 76, 20, 32, 63, 72, -14, 17, -1, -8, 71, -55, 123, -122, 90, -28, 63, 36, 82, -26, 43, 69, -97, 127, -41, 34, 77, -33, -66, 57, -116, -47, -80, 94, 63, -128, 72, -58, 64, 28, 14, 101, -98, -21, -48, 116, 34, 54, -101, 80, 19, 78, 59, -2, -61, -79, -61, -56, -60, 101, 122, -37, 68, 17, 7, -27, 124, 2, 13, -126, -39, -10, 63, -29, 76, -5, -45, 35, -71, -3, 62, 19, 75, 38, -59, -90, -91, 117, 77, 93, 57, 99, -72, 84, -82, -100, -36, -1, 44, -4, -26, -61, 79, -54, 115, -68, 21, 81, -54, -68, -25, 124, -93, -85, 119, -23, 12, -2, 10, 33, -84, -85, -23, -64, -68, 86, 91, 73, -91, 111, 119, -93, -110, 62, -11, -81, 89, -108, -10, 115, 63, 74, 69, -49, 11, -30, 92, 105, 23, 39, -109, 37, -120, 30, 108, 4, -19, -100, -33, 39, 57, -67, -110, -122, 58, -70, 9, 1, -23, -10, -95, 52, -128, -36, -113, -81, 57, -26, -18, -96, -3, -7, -82, -28, 24, 90, 58, 49, -83, -62, -58, -98, 27, 45, 111, -53, -103, 12, -9, 14, -35, -65, 36, -59, -66, -93, 99, -6, -26, -71, -61, 95, 114, 72, 110, 12, -48, -71, 93, 80, 102, 64, -54, 100, 15, 18, 3, 93, 15, -66, -70, -75, 24, 59, -90, 18, -11, -125, 54, 7, 54, 86, 85, 122, -5, -84, -89, 77, 69, 83, 0, 0, 0, 1, -128, 72, -85, 19, -71, 83, 71, 29, 63, -23, 104, -83, 6, -97, 73, -40, -25, -47, 53, 7, -91, -20, 8, -124, 41, -52, 120, 120, 108, 105, -34, -79, 82, 92, -68, 70, 28, 124, 96, -48, -125, -116, 119, 53, -19, -97, 101, -68, -63, -27, 8, 4, 86, -4, 56, 81, 48, -4, 21, -33, 98, -64, -95, 12, -94, 15, 48, 77, 47, 26, 57, 2, 113, 99, -88, -111, -57, -41, 125, -101, -70, -16, 34, 15, 95, 74, -30, -24, -56, 86, -93, -99, 94, -29, 30, -119, 56, 4, -45, -19, -9, -79, 52, 103, -33, -82, 74, -89, 122, 39, -91, -80, -77, 1, 103, 28, 97, 57, -30, 54, -6, -94, 126, 70, -52, -86, 39, -90, -74, 39, -30, 12, -101, -112, -86, -10, 55, 65, 58, -60, -32, 24, -44, 79, 114, -89, 113, -15, -100, 19, 101, 87, 83, 19, 58, -123, -57, -81, -128, 69, 4, 89, -110, 71, -53, 116, 98, -34, 87, 39, 0, -1, 97, -80, 37, -21, -128, -123, 107, 82, -64, -119, 91, -51, 123, 52, 50, -47, 62, -32, -44, 61, -97, 100, 37, -16, 81, -115, -13, -118, -30, -14, 85, -26, 118, 113, -2, 13, 19, 70, -66, 6, -26, -106, 30, -37, -28, -48, -60, 37, 65, -67, -64, 72, -4, 81, -18, 123, -90, 84, 50, 33, 40, 51, 104, -17, -39, 120, -126, -58, -102, 31, 75, 10, 126, 40, 22, 16, 46, 116, -85, 104, 113, -70, -86, 42, 94, 77, 110, -60, 3, 96, -44, 1, -111, -59, -108, -44, -46, -128, -110, -40, 117, 66, 115, 48, -105, -85, 84, 6, -43, -58, -113, 84, 108, -111, 71, 26, 66, 102, -4, 37, -50, 0, -50, 109, -77, 110, 37, 127, 24, 3, 36, 51, -122, 81, -80, 45, -10, 56, -112, -100, -85, -100, -10, 61, 1, -112, -66, -45, 54, -53, -62, -45, -3, 61, -81, -45, 71, -103, -4, 54, 83, 25, 37, -19, -68, -116, 31, 95, 98, -50, -4, -7, -27, -99, 79, -118, -56, 77, -5, -85, 88, 25, 110, 82, 77, -74, -51, -17, -47, 100, 115, 54, -127, 1, -116, 125, 66, -33, -25, -80, -56, 92, -81, -16, 39, -33, 125, -115, -40, -87, 93, 126, -57, 0, 0, 0, 11, 109, 121, 67, 111, 110, 116, 97, 99, 116, 73, 68, 0, 0, 0, 14, 116, 104, 101, 105, 114, 67, 111, 110, 116, 97, 99, 116, 73, 68},
    //            generatePhi(new InstanceTag(Integer.MAX_VALUE), ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID"));
    //    assertArrayEquals(new byte[] {-128, 0, 0, 0, 0, 0, 0, 0, 121, -7, 68, -101, 103, -4, 38, -115, 109, 22, -100, 58, 3, 8, 16, 47, 115, 118, -121, 0, 104, -119, 2, -124, 32, 126, 123, -118, 10, 93, -27, -109, -125, -83, -52, -106, 123, -124, -22, 19, -111, 126, -92, -73, -72, 92, 24, 106, -86, 89, -90, 81, -101, 107, 23, -117, 0, 0, 0, 1, -128, 81, -15, -3, -7, 17, 32, 107, -58, 78, 78, -66, -122, 23, -58, -107, -122, 35, -31, -73, -99, 19, 69, 21, 63, 6, -16, 114, -43, -16, 15, 77, -11, 90, -31, -46, -29, 29, 43, 9, 87, -100, -124, -37, -127, 3, -7, -2, 2, -15, -119, 126, 64, -3, 1, -47, -24, 43, -44, 61, 122, 95, 77, 90, -67, -116, -88, 71, 93, 82, 72, 76, -8, 76, -112, 44, -54, 18, 31, -68, -79, 103, -58, 95, 36, -86, -115, 66, -82, 50, 111, -70, -2, 24, -24, 83, -16, 29, 110, -7, -10, 34, -74, -25, -33, 97, -124, -3, -49, 7, 98, -24, 96, -93, 110, -18, 89, 40, -50, 102, -3, -22, -63, 126, 44, -59, 37, 118, 26, 29, -40, 30, 66, 54, 92, -76, -65, -40, 33, -89, -99, -43, -88, 0, 68, -61, 104, 119, 94, -99, -84, -53, 62, 8, -38, -16, 109, -122, 37, -47, 75, 109, 12, -99, 30, 60, 110, -46, 68, -85, -61, 79, 27, 106, -22, -31, -121, 69, 22, -57, -23, 111, -6, 116, 49, -87, 26, -124, -127, 65, -122, 101, 76, 20, 32, 63, 72, -14, 17, -1, -8, 71, -55, 123, -122, 90, -28, 63, 36, 82, -26, 43, 69, -97, 127, -41, 34, 77, -33, -66, 57, -116, -47, -80, 94, 63, -128, 72, -58, 64, 28, 14, 101, -98, -21, -48, 116, 34, 54, -101, 80, 19, 78, 59, -2, -61, -79, -61, -56, -60, 101, 122, -37, 68, 17, 7, -27, 124, 2, 13, -126, -39, -10, 63, -29, 76, -5, -45, 35, -71, -3, 62, 19, 75, 38, -59, -90, -91, 117, 77, 93, 57, 99, -72, 84, -82, -100, -36, -1, 44, -4, -26, -61, 79, -54, 115, -68, 21, 81, -54, -68, -25, 124, -93, -85, 119, -23, 12, -2, 10, 33, -84, -85, -23, -64, -68, 86, 91, 73, -91, 111, 119, -93, -110, 62, -11, -81, 89, -108, -10, 115, 63, 74, 69, -49, 11, -30, 92, 105, 23, 39, -109, 37, -120, 30, 108, 4, -19, -100, -33, 39, 57, -67, -110, -122, 58, -70, 9, 1, -23, -10, -95, 52, -128, -36, -113, -81, 57, -26, -18, -96, -3, -7, -82, -28, 24, 90, 58, 49, -83, -62, -58, -98, 27, 45, 111, -53, -103, 12, -9, 14, -35, -65, 36, -59, -66, -93, 99, -6, -26, -71, -61, 95, 114, 72, 110, 12, -48, -71, 93, 80, 102, 64, -54, 100, 15, 18, 3, 93, 15, -66, -70, -75, 24, 59, -90, 18, -11, -125, 54, 7, 54, 86, 85, 122, -5, -84, -89, 77, 69, 83, 0, 0, 0, 1, -128, 72, -85, 19, -71, 83, 71, 29, 63, -23, 104, -83, 6, -97, 73, -40, -25, -47, 53, 7, -91, -20, 8, -124, 41, -52, 120, 120, 108, 105, -34, -79, 82, 92, -68, 70, 28, 124, 96, -48, -125, -116, 119, 53, -19, -97, 101, -68, -63, -27, 8, 4, 86, -4, 56, 81, 48, -4, 21, -33, 98, -64, -95, 12, -94, 15, 48, 77, 47, 26, 57, 2, 113, 99, -88, -111, -57, -41, 125, -101, -70, -16, 34, 15, 95, 74, -30, -24, -56, 86, -93, -99, 94, -29, 30, -119, 56, 4, -45, -19, -9, -79, 52, 103, -33, -82, 74, -89, 122, 39, -91, -80, -77, 1, 103, 28, 97, 57, -30, 54, -6, -94, 126, 70, -52, -86, 39, -90, -74, 39, -30, 12, -101, -112, -86, -10, 55, 65, 58, -60, -32, 24, -44, 79, 114, -89, 113, -15, -100, 19, 101, 87, 83, 19, 58, -123, -57, -81, -128, 69, 4, 89, -110, 71, -53, 116, 98, -34, 87, 39, 0, -1, 97, -80, 37, -21, -128, -123, 107, 82, -64, -119, 91, -51, 123, 52, 50, -47, 62, -32, -44, 61, -97, 100, 37, -16, 81, -115, -13, -118, -30, -14, 85, -26, 118, 113, -2, 13, 19, 70, -66, 6, -26, -106, 30, -37, -28, -48, -60, 37, 65, -67, -64, 72, -4, 81, -18, 123, -90, 84, 50, 33, 40, 51, 104, -17, -39, 120, -126, -58, -102, 31, 75, 10, 126, 40, 22, 16, 46, 116, -85, 104, 113, -70, -86, 42, 94, 77, 110, -60, 3, 96, -44, 1, -111, -59, -108, -44, -46, -128, -110, -40, 117, 66, 115, 48, -105, -85, 84, 6, -43, -58, -113, 84, 108, -111, 71, 26, 66, 102, -4, 37, -50, 0, -50, 109, -77, 110, 37, 127, 24, 3, 36, 51, -122, 81, -80, 45, -10, 56, -112, -100, -85, -100, -10, 61, 1, -112, -66, -45, 54, -53, -62, -45, -3, 61, -81, -45, 71, -103, -4, 54, 83, 25, 37, -19, -68, -116, 31, 95, 98, -50, -4, -7, -27, -99, 79, -118, -56, 77, -5, -85, 88, 25, 110, 82, 77, -74, -51, -17, -47, 100, 115, 54, -127, 1, -116, 125, 66, -33, -25, -80, -56, 92, -81, -16, 39, -33, 125, -115, -40, -87, 93, 126, -57, 0, 0, 0, 11, 109, 121, 67, 111, 110, 116, 97, 99, 116, 73, 68, 0, 0, 0, 14, 116, 104, 101, 105, 114, 67, 111, 110, 116, 97, 99, 116, 73, 68},
    //            generatePhi(new InstanceTag(Integer.MIN_VALUE), ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID"));
    //    assertArrayEquals(new byte[] {-1, -1, -1, -1, 0, 0, 0, 0, 121, -7, 68, -101, 103, -4, 38, -115, 109, 22, -100, 58, 3, 8, 16, 47, 115, 118, -121, 0, 104, -119, 2, -124, 32, 126, 123, -118, 10, 93, -27, -109, -125, -83, -52, -106, 123, -124, -22, 19, -111, 126, -92, -73, -72, 92, 24, 106, -86, 89, -90, 81, -101, 107, 23, -117, 0, 0, 0, 1, -128, 81, -15, -3, -7, 17, 32, 107, -58, 78, 78, -66, -122, 23, -58, -107, -122, 35, -31, -73, -99, 19, 69, 21, 63, 6, -16, 114, -43, -16, 15, 77, -11, 90, -31, -46, -29, 29, 43, 9, 87, -100, -124, -37, -127, 3, -7, -2, 2, -15, -119, 126, 64, -3, 1, -47, -24, 43, -44, 61, 122, 95, 77, 90, -67, -116, -88, 71, 93, 82, 72, 76, -8, 76, -112, 44, -54, 18, 31, -68, -79, 103, -58, 95, 36, -86, -115, 66, -82, 50, 111, -70, -2, 24, -24, 83, -16, 29, 110, -7, -10, 34, -74, -25, -33, 97, -124, -3, -49, 7, 98, -24, 96, -93, 110, -18, 89, 40, -50, 102, -3, -22, -63, 126, 44, -59, 37, 118, 26, 29, -40, 30, 66, 54, 92, -76, -65, -40, 33, -89, -99, -43, -88, 0, 68, -61, 104, 119, 94, -99, -84, -53, 62, 8, -38, -16, 109, -122, 37, -47, 75, 109, 12, -99, 30, 60, 110, -46, 68, -85, -61, 79, 27, 106, -22, -31, -121, 69, 22, -57, -23, 111, -6, 116, 49, -87, 26, -124, -127, 65, -122, 101, 76, 20, 32, 63, 72, -14, 17, -1, -8, 71, -55, 123, -122, 90, -28, 63, 36, 82, -26, 43, 69, -97, 127, -41, 34, 77, -33, -66, 57, -116, -47, -80, 94, 63, -128, 72, -58, 64, 28, 14, 101, -98, -21, -48, 116, 34, 54, -101, 80, 19, 78, 59, -2, -61, -79, -61, -56, -60, 101, 122, -37, 68, 17, 7, -27, 124, 2, 13, -126, -39, -10, 63, -29, 76, -5, -45, 35, -71, -3, 62, 19, 75, 38, -59, -90, -91, 117, 77, 93, 57, 99, -72, 84, -82, -100, -36, -1, 44, -4, -26, -61, 79, -54, 115, -68, 21, 81, -54, -68, -25, 124, -93, -85, 119, -23, 12, -2, 10, 33, -84, -85, -23, -64, -68, 86, 91, 73, -91, 111, 119, -93, -110, 62, -11, -81, 89, -108, -10, 115, 63, 74, 69, -49, 11, -30, 92, 105, 23, 39, -109, 37, -120, 30, 108, 4, -19, -100, -33, 39, 57, -67, -110, -122, 58, -70, 9, 1, -23, -10, -95, 52, -128, -36, -113, -81, 57, -26, -18, -96, -3, -7, -82, -28, 24, 90, 58, 49, -83, -62, -58, -98, 27, 45, 111, -53, -103, 12, -9, 14, -35, -65, 36, -59, -66, -93, 99, -6, -26, -71, -61, 95, 114, 72, 110, 12, -48, -71, 93, 80, 102, 64, -54, 100, 15, 18, 3, 93, 15, -66, -70, -75, 24, 59, -90, 18, -11, -125, 54, 7, 54, 86, 85, 122, -5, -84, -89, 77, 69, 83, 0, 0, 0, 1, -128, 72, -85, 19, -71, 83, 71, 29, 63, -23, 104, -83, 6, -97, 73, -40, -25, -47, 53, 7, -91, -20, 8, -124, 41, -52, 120, 120, 108, 105, -34, -79, 82, 92, -68, 70, 28, 124, 96, -48, -125, -116, 119, 53, -19, -97, 101, -68, -63, -27, 8, 4, 86, -4, 56, 81, 48, -4, 21, -33, 98, -64, -95, 12, -94, 15, 48, 77, 47, 26, 57, 2, 113, 99, -88, -111, -57, -41, 125, -101, -70, -16, 34, 15, 95, 74, -30, -24, -56, 86, -93, -99, 94, -29, 30, -119, 56, 4, -45, -19, -9, -79, 52, 103, -33, -82, 74, -89, 122, 39, -91, -80, -77, 1, 103, 28, 97, 57, -30, 54, -6, -94, 126, 70, -52, -86, 39, -90, -74, 39, -30, 12, -101, -112, -86, -10, 55, 65, 58, -60, -32, 24, -44, 79, 114, -89, 113, -15, -100, 19, 101, 87, 83, 19, 58, -123, -57, -81, -128, 69, 4, 89, -110, 71, -53, 116, 98, -34, 87, 39, 0, -1, 97, -80, 37, -21, -128, -123, 107, 82, -64, -119, 91, -51, 123, 52, 50, -47, 62, -32, -44, 61, -97, 100, 37, -16, 81, -115, -13, -118, -30, -14, 85, -26, 118, 113, -2, 13, 19, 70, -66, 6, -26, -106, 30, -37, -28, -48, -60, 37, 65, -67, -64, 72, -4, 81, -18, 123, -90, 84, 50, 33, 40, 51, 104, -17, -39, 120, -126, -58, -102, 31, 75, 10, 126, 40, 22, 16, 46, 116, -85, 104, 113, -70, -86, 42, 94, 77, 110, -60, 3, 96, -44, 1, -111, -59, -108, -44, -46, -128, -110, -40, 117, 66, 115, 48, -105, -85, 84, 6, -43, -58, -113, 84, 108, -111, 71, 26, 66, 102, -4, 37, -50, 0, -50, 109, -77, 110, 37, 127, 24, 3, 36, 51, -122, 81, -80, 45, -10, 56, -112, -100, -85, -100, -10, 61, 1, -112, -66, -45, 54, -53, -62, -45, -3, 61, -81, -45, 71, -103, -4, 54, 83, 25, 37, -19, -68, -116, 31, 95, 98, -50, -4, -7, -27, -99, 79, -118, -56, 77, -5, -85, 88, 25, 110, 82, 77, -74, -51, -17, -47, 100, 115, 54, -127, 1, -116, 125, 66, -33, -25, -80, -56, 92, -81, -16, 39, -33, 125, -115, -40, -87, 93, 126, -57, 0, 0, 0, 11, 109, 121, 67, 111, 110, 116, 97, 99, 116, 73, 68, 0, 0, 0, 14, 116, 104, 101, 105, 114, 67, 111, 110, 116, 97, 99, 116, 73, 68},
    //            generatePhi(new InstanceTag(0xffffffff), ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID"));
    //}
    //
    //@Test
    //public void testGeneratePhiExtremeReceiverInstanceTagValues() {
    //    assertArrayEquals(new byte[] {0, 0, 0, 0, 127, -1, -1, -1, 121, -7, 68, -101, 103, -4, 38, -115, 109, 22, -100, 58, 3, 8, 16, 47, 115, 118, -121, 0, 104, -119, 2, -124, 32, 126, 123, -118, 10, 93, -27, -109, -125, -83, -52, -106, 123, -124, -22, 19, -111, 126, -92, -73, -72, 92, 24, 106, -86, 89, -90, 81, -101, 107, 23, -117, 0, 0, 0, 1, -128, 81, -15, -3, -7, 17, 32, 107, -58, 78, 78, -66, -122, 23, -58, -107, -122, 35, -31, -73, -99, 19, 69, 21, 63, 6, -16, 114, -43, -16, 15, 77, -11, 90, -31, -46, -29, 29, 43, 9, 87, -100, -124, -37, -127, 3, -7, -2, 2, -15, -119, 126, 64, -3, 1, -47, -24, 43, -44, 61, 122, 95, 77, 90, -67, -116, -88, 71, 93, 82, 72, 76, -8, 76, -112, 44, -54, 18, 31, -68, -79, 103, -58, 95, 36, -86, -115, 66, -82, 50, 111, -70, -2, 24, -24, 83, -16, 29, 110, -7, -10, 34, -74, -25, -33, 97, -124, -3, -49, 7, 98, -24, 96, -93, 110, -18, 89, 40, -50, 102, -3, -22, -63, 126, 44, -59, 37, 118, 26, 29, -40, 30, 66, 54, 92, -76, -65, -40, 33, -89, -99, -43, -88, 0, 68, -61, 104, 119, 94, -99, -84, -53, 62, 8, -38, -16, 109, -122, 37, -47, 75, 109, 12, -99, 30, 60, 110, -46, 68, -85, -61, 79, 27, 106, -22, -31, -121, 69, 22, -57, -23, 111, -6, 116, 49, -87, 26, -124, -127, 65, -122, 101, 76, 20, 32, 63, 72, -14, 17, -1, -8, 71, -55, 123, -122, 90, -28, 63, 36, 82, -26, 43, 69, -97, 127, -41, 34, 77, -33, -66, 57, -116, -47, -80, 94, 63, -128, 72, -58, 64, 28, 14, 101, -98, -21, -48, 116, 34, 54, -101, 80, 19, 78, 59, -2, -61, -79, -61, -56, -60, 101, 122, -37, 68, 17, 7, -27, 124, 2, 13, -126, -39, -10, 63, -29, 76, -5, -45, 35, -71, -3, 62, 19, 75, 38, -59, -90, -91, 117, 77, 93, 57, 99, -72, 84, -82, -100, -36, -1, 44, -4, -26, -61, 79, -54, 115, -68, 21, 81, -54, -68, -25, 124, -93, -85, 119, -23, 12, -2, 10, 33, -84, -85, -23, -64, -68, 86, 91, 73, -91, 111, 119, -93, -110, 62, -11, -81, 89, -108, -10, 115, 63, 74, 69, -49, 11, -30, 92, 105, 23, 39, -109, 37, -120, 30, 108, 4, -19, -100, -33, 39, 57, -67, -110, -122, 58, -70, 9, 1, -23, -10, -95, 52, -128, -36, -113, -81, 57, -26, -18, -96, -3, -7, -82, -28, 24, 90, 58, 49, -83, -62, -58, -98, 27, 45, 111, -53, -103, 12, -9, 14, -35, -65, 36, -59, -66, -93, 99, -6, -26, -71, -61, 95, 114, 72, 110, 12, -48, -71, 93, 80, 102, 64, -54, 100, 15, 18, 3, 93, 15, -66, -70, -75, 24, 59, -90, 18, -11, -125, 54, 7, 54, 86, 85, 122, -5, -84, -89, 77, 69, 83, 0, 0, 0, 1, -128, 72, -85, 19, -71, 83, 71, 29, 63, -23, 104, -83, 6, -97, 73, -40, -25, -47, 53, 7, -91, -20, 8, -124, 41, -52, 120, 120, 108, 105, -34, -79, 82, 92, -68, 70, 28, 124, 96, -48, -125, -116, 119, 53, -19, -97, 101, -68, -63, -27, 8, 4, 86, -4, 56, 81, 48, -4, 21, -33, 98, -64, -95, 12, -94, 15, 48, 77, 47, 26, 57, 2, 113, 99, -88, -111, -57, -41, 125, -101, -70, -16, 34, 15, 95, 74, -30, -24, -56, 86, -93, -99, 94, -29, 30, -119, 56, 4, -45, -19, -9, -79, 52, 103, -33, -82, 74, -89, 122, 39, -91, -80, -77, 1, 103, 28, 97, 57, -30, 54, -6, -94, 126, 70, -52, -86, 39, -90, -74, 39, -30, 12, -101, -112, -86, -10, 55, 65, 58, -60, -32, 24, -44, 79, 114, -89, 113, -15, -100, 19, 101, 87, 83, 19, 58, -123, -57, -81, -128, 69, 4, 89, -110, 71, -53, 116, 98, -34, 87, 39, 0, -1, 97, -80, 37, -21, -128, -123, 107, 82, -64, -119, 91, -51, 123, 52, 50, -47, 62, -32, -44, 61, -97, 100, 37, -16, 81, -115, -13, -118, -30, -14, 85, -26, 118, 113, -2, 13, 19, 70, -66, 6, -26, -106, 30, -37, -28, -48, -60, 37, 65, -67, -64, 72, -4, 81, -18, 123, -90, 84, 50, 33, 40, 51, 104, -17, -39, 120, -126, -58, -102, 31, 75, 10, 126, 40, 22, 16, 46, 116, -85, 104, 113, -70, -86, 42, 94, 77, 110, -60, 3, 96, -44, 1, -111, -59, -108, -44, -46, -128, -110, -40, 117, 66, 115, 48, -105, -85, 84, 6, -43, -58, -113, 84, 108, -111, 71, 26, 66, 102, -4, 37, -50, 0, -50, 109, -77, 110, 37, 127, 24, 3, 36, 51, -122, 81, -80, 45, -10, 56, -112, -100, -85, -100, -10, 61, 1, -112, -66, -45, 54, -53, -62, -45, -3, 61, -81, -45, 71, -103, -4, 54, 83, 25, 37, -19, -68, -116, 31, 95, 98, -50, -4, -7, -27, -99, 79, -118, -56, 77, -5, -85, 88, 25, 110, 82, 77, -74, -51, -17, -47, 100, 115, 54, -127, 1, -116, 125, 66, -33, -25, -80, -56, 92, -81, -16, 39, -33, 125, -115, -40, -87, 93, 126, -57, 0, 0, 0, 11, 109, 121, 67, 111, 110, 116, 97, 99, 116, 73, 68, 0, 0, 0, 14, 116, 104, 101, 105, 114, 67, 111, 110, 116, 97, 99, 116, 73, 68},
    //            generatePhi(ZERO_TAG, new InstanceTag(Integer.MAX_VALUE), SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID"));
    //    assertArrayEquals(new byte[] {0, 0, 0, 0, -128, 0, 0, 0, 121, -7, 68, -101, 103, -4, 38, -115, 109, 22, -100, 58, 3, 8, 16, 47, 115, 118, -121, 0, 104, -119, 2, -124, 32, 126, 123, -118, 10, 93, -27, -109, -125, -83, -52, -106, 123, -124, -22, 19, -111, 126, -92, -73, -72, 92, 24, 106, -86, 89, -90, 81, -101, 107, 23, -117, 0, 0, 0, 1, -128, 81, -15, -3, -7, 17, 32, 107, -58, 78, 78, -66, -122, 23, -58, -107, -122, 35, -31, -73, -99, 19, 69, 21, 63, 6, -16, 114, -43, -16, 15, 77, -11, 90, -31, -46, -29, 29, 43, 9, 87, -100, -124, -37, -127, 3, -7, -2, 2, -15, -119, 126, 64, -3, 1, -47, -24, 43, -44, 61, 122, 95, 77, 90, -67, -116, -88, 71, 93, 82, 72, 76, -8, 76, -112, 44, -54, 18, 31, -68, -79, 103, -58, 95, 36, -86, -115, 66, -82, 50, 111, -70, -2, 24, -24, 83, -16, 29, 110, -7, -10, 34, -74, -25, -33, 97, -124, -3, -49, 7, 98, -24, 96, -93, 110, -18, 89, 40, -50, 102, -3, -22, -63, 126, 44, -59, 37, 118, 26, 29, -40, 30, 66, 54, 92, -76, -65, -40, 33, -89, -99, -43, -88, 0, 68, -61, 104, 119, 94, -99, -84, -53, 62, 8, -38, -16, 109, -122, 37, -47, 75, 109, 12, -99, 30, 60, 110, -46, 68, -85, -61, 79, 27, 106, -22, -31, -121, 69, 22, -57, -23, 111, -6, 116, 49, -87, 26, -124, -127, 65, -122, 101, 76, 20, 32, 63, 72, -14, 17, -1, -8, 71, -55, 123, -122, 90, -28, 63, 36, 82, -26, 43, 69, -97, 127, -41, 34, 77, -33, -66, 57, -116, -47, -80, 94, 63, -128, 72, -58, 64, 28, 14, 101, -98, -21, -48, 116, 34, 54, -101, 80, 19, 78, 59, -2, -61, -79, -61, -56, -60, 101, 122, -37, 68, 17, 7, -27, 124, 2, 13, -126, -39, -10, 63, -29, 76, -5, -45, 35, -71, -3, 62, 19, 75, 38, -59, -90, -91, 117, 77, 93, 57, 99, -72, 84, -82, -100, -36, -1, 44, -4, -26, -61, 79, -54, 115, -68, 21, 81, -54, -68, -25, 124, -93, -85, 119, -23, 12, -2, 10, 33, -84, -85, -23, -64, -68, 86, 91, 73, -91, 111, 119, -93, -110, 62, -11, -81, 89, -108, -10, 115, 63, 74, 69, -49, 11, -30, 92, 105, 23, 39, -109, 37, -120, 30, 108, 4, -19, -100, -33, 39, 57, -67, -110, -122, 58, -70, 9, 1, -23, -10, -95, 52, -128, -36, -113, -81, 57, -26, -18, -96, -3, -7, -82, -28, 24, 90, 58, 49, -83, -62, -58, -98, 27, 45, 111, -53, -103, 12, -9, 14, -35, -65, 36, -59, -66, -93, 99, -6, -26, -71, -61, 95, 114, 72, 110, 12, -48, -71, 93, 80, 102, 64, -54, 100, 15, 18, 3, 93, 15, -66, -70, -75, 24, 59, -90, 18, -11, -125, 54, 7, 54, 86, 85, 122, -5, -84, -89, 77, 69, 83, 0, 0, 0, 1, -128, 72, -85, 19, -71, 83, 71, 29, 63, -23, 104, -83, 6, -97, 73, -40, -25, -47, 53, 7, -91, -20, 8, -124, 41, -52, 120, 120, 108, 105, -34, -79, 82, 92, -68, 70, 28, 124, 96, -48, -125, -116, 119, 53, -19, -97, 101, -68, -63, -27, 8, 4, 86, -4, 56, 81, 48, -4, 21, -33, 98, -64, -95, 12, -94, 15, 48, 77, 47, 26, 57, 2, 113, 99, -88, -111, -57, -41, 125, -101, -70, -16, 34, 15, 95, 74, -30, -24, -56, 86, -93, -99, 94, -29, 30, -119, 56, 4, -45, -19, -9, -79, 52, 103, -33, -82, 74, -89, 122, 39, -91, -80, -77, 1, 103, 28, 97, 57, -30, 54, -6, -94, 126, 70, -52, -86, 39, -90, -74, 39, -30, 12, -101, -112, -86, -10, 55, 65, 58, -60, -32, 24, -44, 79, 114, -89, 113, -15, -100, 19, 101, 87, 83, 19, 58, -123, -57, -81, -128, 69, 4, 89, -110, 71, -53, 116, 98, -34, 87, 39, 0, -1, 97, -80, 37, -21, -128, -123, 107, 82, -64, -119, 91, -51, 123, 52, 50, -47, 62, -32, -44, 61, -97, 100, 37, -16, 81, -115, -13, -118, -30, -14, 85, -26, 118, 113, -2, 13, 19, 70, -66, 6, -26, -106, 30, -37, -28, -48, -60, 37, 65, -67, -64, 72, -4, 81, -18, 123, -90, 84, 50, 33, 40, 51, 104, -17, -39, 120, -126, -58, -102, 31, 75, 10, 126, 40, 22, 16, 46, 116, -85, 104, 113, -70, -86, 42, 94, 77, 110, -60, 3, 96, -44, 1, -111, -59, -108, -44, -46, -128, -110, -40, 117, 66, 115, 48, -105, -85, 84, 6, -43, -58, -113, 84, 108, -111, 71, 26, 66, 102, -4, 37, -50, 0, -50, 109, -77, 110, 37, 127, 24, 3, 36, 51, -122, 81, -80, 45, -10, 56, -112, -100, -85, -100, -10, 61, 1, -112, -66, -45, 54, -53, -62, -45, -3, 61, -81, -45, 71, -103, -4, 54, 83, 25, 37, -19, -68, -116, 31, 95, 98, -50, -4, -7, -27, -99, 79, -118, -56, 77, -5, -85, 88, 25, 110, 82, 77, -74, -51, -17, -47, 100, 115, 54, -127, 1, -116, 125, 66, -33, -25, -80, -56, 92, -81, -16, 39, -33, 125, -115, -40, -87, 93, 126, -57, 0, 0, 0, 11, 109, 121, 67, 111, 110, 116, 97, 99, 116, 73, 68, 0, 0, 0, 14, 116, 104, 101, 105, 114, 67, 111, 110, 116, 97, 99, 116, 73, 68},
    //            generatePhi(ZERO_TAG, new InstanceTag(Integer.MIN_VALUE), SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID"));
    //    assertArrayEquals(new byte[] {0, 0, 0, 0, -1, -1, -1, -1, 121, -7, 68, -101, 103, -4, 38, -115, 109, 22, -100, 58, 3, 8, 16, 47, 115, 118, -121, 0, 104, -119, 2, -124, 32, 126, 123, -118, 10, 93, -27, -109, -125, -83, -52, -106, 123, -124, -22, 19, -111, 126, -92, -73, -72, 92, 24, 106, -86, 89, -90, 81, -101, 107, 23, -117, 0, 0, 0, 1, -128, 81, -15, -3, -7, 17, 32, 107, -58, 78, 78, -66, -122, 23, -58, -107, -122, 35, -31, -73, -99, 19, 69, 21, 63, 6, -16, 114, -43, -16, 15, 77, -11, 90, -31, -46, -29, 29, 43, 9, 87, -100, -124, -37, -127, 3, -7, -2, 2, -15, -119, 126, 64, -3, 1, -47, -24, 43, -44, 61, 122, 95, 77, 90, -67, -116, -88, 71, 93, 82, 72, 76, -8, 76, -112, 44, -54, 18, 31, -68, -79, 103, -58, 95, 36, -86, -115, 66, -82, 50, 111, -70, -2, 24, -24, 83, -16, 29, 110, -7, -10, 34, -74, -25, -33, 97, -124, -3, -49, 7, 98, -24, 96, -93, 110, -18, 89, 40, -50, 102, -3, -22, -63, 126, 44, -59, 37, 118, 26, 29, -40, 30, 66, 54, 92, -76, -65, -40, 33, -89, -99, -43, -88, 0, 68, -61, 104, 119, 94, -99, -84, -53, 62, 8, -38, -16, 109, -122, 37, -47, 75, 109, 12, -99, 30, 60, 110, -46, 68, -85, -61, 79, 27, 106, -22, -31, -121, 69, 22, -57, -23, 111, -6, 116, 49, -87, 26, -124, -127, 65, -122, 101, 76, 20, 32, 63, 72, -14, 17, -1, -8, 71, -55, 123, -122, 90, -28, 63, 36, 82, -26, 43, 69, -97, 127, -41, 34, 77, -33, -66, 57, -116, -47, -80, 94, 63, -128, 72, -58, 64, 28, 14, 101, -98, -21, -48, 116, 34, 54, -101, 80, 19, 78, 59, -2, -61, -79, -61, -56, -60, 101, 122, -37, 68, 17, 7, -27, 124, 2, 13, -126, -39, -10, 63, -29, 76, -5, -45, 35, -71, -3, 62, 19, 75, 38, -59, -90, -91, 117, 77, 93, 57, 99, -72, 84, -82, -100, -36, -1, 44, -4, -26, -61, 79, -54, 115, -68, 21, 81, -54, -68, -25, 124, -93, -85, 119, -23, 12, -2, 10, 33, -84, -85, -23, -64, -68, 86, 91, 73, -91, 111, 119, -93, -110, 62, -11, -81, 89, -108, -10, 115, 63, 74, 69, -49, 11, -30, 92, 105, 23, 39, -109, 37, -120, 30, 108, 4, -19, -100, -33, 39, 57, -67, -110, -122, 58, -70, 9, 1, -23, -10, -95, 52, -128, -36, -113, -81, 57, -26, -18, -96, -3, -7, -82, -28, 24, 90, 58, 49, -83, -62, -58, -98, 27, 45, 111, -53, -103, 12, -9, 14, -35, -65, 36, -59, -66, -93, 99, -6, -26, -71, -61, 95, 114, 72, 110, 12, -48, -71, 93, 80, 102, 64, -54, 100, 15, 18, 3, 93, 15, -66, -70, -75, 24, 59, -90, 18, -11, -125, 54, 7, 54, 86, 85, 122, -5, -84, -89, 77, 69, 83, 0, 0, 0, 1, -128, 72, -85, 19, -71, 83, 71, 29, 63, -23, 104, -83, 6, -97, 73, -40, -25, -47, 53, 7, -91, -20, 8, -124, 41, -52, 120, 120, 108, 105, -34, -79, 82, 92, -68, 70, 28, 124, 96, -48, -125, -116, 119, 53, -19, -97, 101, -68, -63, -27, 8, 4, 86, -4, 56, 81, 48, -4, 21, -33, 98, -64, -95, 12, -94, 15, 48, 77, 47, 26, 57, 2, 113, 99, -88, -111, -57, -41, 125, -101, -70, -16, 34, 15, 95, 74, -30, -24, -56, 86, -93, -99, 94, -29, 30, -119, 56, 4, -45, -19, -9, -79, 52, 103, -33, -82, 74, -89, 122, 39, -91, -80, -77, 1, 103, 28, 97, 57, -30, 54, -6, -94, 126, 70, -52, -86, 39, -90, -74, 39, -30, 12, -101, -112, -86, -10, 55, 65, 58, -60, -32, 24, -44, 79, 114, -89, 113, -15, -100, 19, 101, 87, 83, 19, 58, -123, -57, -81, -128, 69, 4, 89, -110, 71, -53, 116, 98, -34, 87, 39, 0, -1, 97, -80, 37, -21, -128, -123, 107, 82, -64, -119, 91, -51, 123, 52, 50, -47, 62, -32, -44, 61, -97, 100, 37, -16, 81, -115, -13, -118, -30, -14, 85, -26, 118, 113, -2, 13, 19, 70, -66, 6, -26, -106, 30, -37, -28, -48, -60, 37, 65, -67, -64, 72, -4, 81, -18, 123, -90, 84, 50, 33, 40, 51, 104, -17, -39, 120, -126, -58, -102, 31, 75, 10, 126, 40, 22, 16, 46, 116, -85, 104, 113, -70, -86, 42, 94, 77, 110, -60, 3, 96, -44, 1, -111, -59, -108, -44, -46, -128, -110, -40, 117, 66, 115, 48, -105, -85, 84, 6, -43, -58, -113, 84, 108, -111, 71, 26, 66, 102, -4, 37, -50, 0, -50, 109, -77, 110, 37, 127, 24, 3, 36, 51, -122, 81, -80, 45, -10, 56, -112, -100, -85, -100, -10, 61, 1, -112, -66, -45, 54, -53, -62, -45, -3, 61, -81, -45, 71, -103, -4, 54, 83, 25, 37, -19, -68, -116, 31, 95, 98, -50, -4, -7, -27, -99, 79, -118, -56, 77, -5, -85, 88, 25, 110, 82, 77, -74, -51, -17, -47, 100, 115, 54, -127, 1, -116, 125, 66, -33, -25, -80, -56, 92, -81, -16, 39, -33, 125, -115, -40, -87, 93, 126, -57, 0, 0, 0, 11, 109, 121, 67, 111, 110, 116, 97, 99, 116, 73, 68, 0, 0, 0, 14, 116, 104, 101, 105, 114, 67, 111, 110, 116, 97, 99, 116, 73, 68},
    //            generatePhi(ZERO_TAG, new InstanceTag(0xffffffff), SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID"));
    //}
    //
    //@Test
    //public void testGeneratePhiEmptyQueryTagIsAccepted() {
    //    assertArrayEquals(new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 121, -7, 68, -101, 103, -4, 38, -115, 109, 22, -100, 58, 3, 8, 16, 47, 115, 118, -121, 0, 104, -119, 2, -124, 32, 126, 123, -118, 10, 93, -27, -109, -125, -83, -52, -106, 123, -124, -22, 19, -111, 126, -92, -73, -72, 92, 24, 106, -86, 89, -90, 81, -101, 107, 23, -117, 0, 0, 0, 1, -128, 81, -15, -3, -7, 17, 32, 107, -58, 78, 78, -66, -122, 23, -58, -107, -122, 35, -31, -73, -99, 19, 69, 21, 63, 6, -16, 114, -43, -16, 15, 77, -11, 90, -31, -46, -29, 29, 43, 9, 87, -100, -124, -37, -127, 3, -7, -2, 2, -15, -119, 126, 64, -3, 1, -47, -24, 43, -44, 61, 122, 95, 77, 90, -67, -116, -88, 71, 93, 82, 72, 76, -8, 76, -112, 44, -54, 18, 31, -68, -79, 103, -58, 95, 36, -86, -115, 66, -82, 50, 111, -70, -2, 24, -24, 83, -16, 29, 110, -7, -10, 34, -74, -25, -33, 97, -124, -3, -49, 7, 98, -24, 96, -93, 110, -18, 89, 40, -50, 102, -3, -22, -63, 126, 44, -59, 37, 118, 26, 29, -40, 30, 66, 54, 92, -76, -65, -40, 33, -89, -99, -43, -88, 0, 68, -61, 104, 119, 94, -99, -84, -53, 62, 8, -38, -16, 109, -122, 37, -47, 75, 109, 12, -99, 30, 60, 110, -46, 68, -85, -61, 79, 27, 106, -22, -31, -121, 69, 22, -57, -23, 111, -6, 116, 49, -87, 26, -124, -127, 65, -122, 101, 76, 20, 32, 63, 72, -14, 17, -1, -8, 71, -55, 123, -122, 90, -28, 63, 36, 82, -26, 43, 69, -97, 127, -41, 34, 77, -33, -66, 57, -116, -47, -80, 94, 63, -128, 72, -58, 64, 28, 14, 101, -98, -21, -48, 116, 34, 54, -101, 80, 19, 78, 59, -2, -61, -79, -61, -56, -60, 101, 122, -37, 68, 17, 7, -27, 124, 2, 13, -126, -39, -10, 63, -29, 76, -5, -45, 35, -71, -3, 62, 19, 75, 38, -59, -90, -91, 117, 77, 93, 57, 99, -72, 84, -82, -100, -36, -1, 44, -4, -26, -61, 79, -54, 115, -68, 21, 81, -54, -68, -25, 124, -93, -85, 119, -23, 12, -2, 10, 33, -84, -85, -23, -64, -68, 86, 91, 73, -91, 111, 119, -93, -110, 62, -11, -81, 89, -108, -10, 115, 63, 74, 69, -49, 11, -30, 92, 105, 23, 39, -109, 37, -120, 30, 108, 4, -19, -100, -33, 39, 57, -67, -110, -122, 58, -70, 9, 1, -23, -10, -95, 52, -128, -36, -113, -81, 57, -26, -18, -96, -3, -7, -82, -28, 24, 90, 58, 49, -83, -62, -58, -98, 27, 45, 111, -53, -103, 12, -9, 14, -35, -65, 36, -59, -66, -93, 99, -6, -26, -71, -61, 95, 114, 72, 110, 12, -48, -71, 93, 80, 102, 64, -54, 100, 15, 18, 3, 93, 15, -66, -70, -75, 24, 59, -90, 18, -11, -125, 54, 7, 54, 86, 85, 122, -5, -84, -89, 77, 69, 83, 0, 0, 0, 1, -128, 72, -85, 19, -71, 83, 71, 29, 63, -23, 104, -83, 6, -97, 73, -40, -25, -47, 53, 7, -91, -20, 8, -124, 41, -52, 120, 120, 108, 105, -34, -79, 82, 92, -68, 70, 28, 124, 96, -48, -125, -116, 119, 53, -19, -97, 101, -68, -63, -27, 8, 4, 86, -4, 56, 81, 48, -4, 21, -33, 98, -64, -95, 12, -94, 15, 48, 77, 47, 26, 57, 2, 113, 99, -88, -111, -57, -41, 125, -101, -70, -16, 34, 15, 95, 74, -30, -24, -56, 86, -93, -99, 94, -29, 30, -119, 56, 4, -45, -19, -9, -79, 52, 103, -33, -82, 74, -89, 122, 39, -91, -80, -77, 1, 103, 28, 97, 57, -30, 54, -6, -94, 126, 70, -52, -86, 39, -90, -74, 39, -30, 12, -101, -112, -86, -10, 55, 65, 58, -60, -32, 24, -44, 79, 114, -89, 113, -15, -100, 19, 101, 87, 83, 19, 58, -123, -57, -81, -128, 69, 4, 89, -110, 71, -53, 116, 98, -34, 87, 39, 0, -1, 97, -80, 37, -21, -128, -123, 107, 82, -64, -119, 91, -51, 123, 52, 50, -47, 62, -32, -44, 61, -97, 100, 37, -16, 81, -115, -13, -118, -30, -14, 85, -26, 118, 113, -2, 13, 19, 70, -66, 6, -26, -106, 30, -37, -28, -48, -60, 37, 65, -67, -64, 72, -4, 81, -18, 123, -90, 84, 50, 33, 40, 51, 104, -17, -39, 120, -126, -58, -102, 31, 75, 10, 126, 40, 22, 16, 46, 116, -85, 104, 113, -70, -86, 42, 94, 77, 110, -60, 3, 96, -44, 1, -111, -59, -108, -44, -46, -128, -110, -40, 117, 66, 115, 48, -105, -85, 84, 6, -43, -58, -113, 84, 108, -111, 71, 26, 66, 102, -4, 37, -50, 0, -50, 109, -77, 110, 37, 127, 24, 3, 36, 51, -122, 81, -80, 45, -10, 56, -112, -100, -85, -100, -10, 61, 1, -112, -66, -45, 54, -53, -62, -45, -3, 61, -81, -45, 71, -103, -4, 54, 83, 25, 37, -19, -68, -116, 31, 95, 98, -50, -4, -7, -27, -99, 79, -118, -56, 77, -5, -85, 88, 25, 110, 82, 77, -74, -51, -17, -47, 100, 115, 54, -127, 1, -116, 125, 66, -33, -25, -80, -56, 92, -81, -16, 39, -33, 125, -115, -40, -87, 93, 126, -57, 0, 0, 0, 11, 109, 121, 67, 111, 110, 116, 97, 99, 116, 73, 68, 0, 0, 0, 14, 116, 104, 101, 105, 114, 67, 111, 110, 116, 97, 99, 116, 73, 68},
    //            generatePhi(ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID"));
    //}
    //
    //@Test
    //public void testGeneratePhiUnicodeCharactersAreReflectedByLengthOfResult() {
    //    final byte[] plainChars = generatePhi(ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "theirContactID");
    //    final byte[] unicodeCharsReceiver = generatePhi(ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "myContactID", "th\ud801\udc01irContactID");
    //    assertTrue(plainChars.length < unicodeCharsReceiver.length);
    //    final byte[] unicodeCharsSender = generatePhi(ZERO_TAG, ZERO_TAG, SENDER_FIRST_ECDH_PUBLIC_KEY, SENDER_FIRST_DH_PUBLIC_KEY, RECEIVER_FIRST_ECDH_PUBLIC_KEY, RECEIVER_FIRST_DH_PUBLIC_KEY, "m\u24e8ContactID", "theirContactID");
    //    assertTrue(plainChars.length < unicodeCharsSender.length);
    //}
}
