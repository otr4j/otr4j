/*
 * otr4j, the open source java otr library.
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 *
 * SPDX-License-Identifier: LGPL-3.0-only
 */

package net.java.otr4j.messages;

import net.java.otr4j.api.Session;
import net.java.otr4j.api.Session.Version;
import net.java.otr4j.crypto.DHKeyPair;
import net.java.otr4j.crypto.OtrCryptoException;
import net.java.otr4j.crypto.ed448.ECDHKeyPair;
import net.java.otr4j.crypto.ed448.Point;
import net.java.otr4j.io.OtrInputStream;
import net.java.otr4j.io.OtrOutputStream;
import org.junit.Test;

import java.io.IOException;
import java.math.BigInteger;
import java.security.SecureRandom;

import static java.util.Arrays.copyOfRange;
import static net.java.otr4j.api.InstanceTag.HIGHEST_TAG;
import static net.java.otr4j.api.InstanceTag.SMALLEST_TAG;
import static net.java.otr4j.util.SecureRandoms.randomBytes;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

@SuppressWarnings("ConstantConditions")
public final class DataMessage4Test {

    private static final SecureRandom RANDOM = new SecureRandom();

    private static final Point ECDH_PUBLIC_KEY = ECDHKeyPair.generate(RANDOM).publicKey();

    private static final BigInteger DH_PUBLIC_KEY = DHKeyPair.generate(RANDOM).publicKey();

    @Test
    public void testConstructDataMessage4() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        final byte[] revealedMACs = new byte[0];
        final DataMessage4 message = new DataMessage4(Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0,
                ECDH_PUBLIC_KEY, DH_PUBLIC_KEY, content, authenticator, revealedMACs);
        assertEquals(Version.FOUR, message.protocolVersion);
        assertEquals(SMALLEST_TAG, message.senderTag);
        assertEquals(HIGHEST_TAG, message.receiverTag);
        assertEquals(0, message.flags);
        assertEquals(0, message.pn);
        assertEquals(0, message.i);
        assertEquals(0, message.j);
        assertEquals(ECDH_PUBLIC_KEY, message.ecdhPublicKey);
        assertEquals(DH_PUBLIC_KEY, message.dhPublicKey);
        assertEquals(content, message.ciphertext);
        assertEquals(authenticator, message.authenticator);
        assertEquals(revealedMACs, message.revealedMacs);
    }

    @Test
    public void testConstructDataMessage4WithoutDHPublicKey() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        final byte[] revealedMACs = new byte[0];
        final DataMessage4 message = new DataMessage4(Session.Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0,
                ECDH_PUBLIC_KEY, null, content, authenticator, revealedMACs);
        assertEquals(Version.FOUR, message.protocolVersion);
        assertEquals(SMALLEST_TAG, message.senderTag);
        assertEquals(HIGHEST_TAG, message.receiverTag);
        assertEquals(0, message.flags);
        assertEquals(0, message.pn);
        assertEquals(0, message.i);
        assertEquals(0, message.j);
        assertEquals(ECDH_PUBLIC_KEY, message.ecdhPublicKey);
        assertNull(message.dhPublicKey);
        assertEquals(content, message.ciphertext);
        assertEquals(authenticator, message.authenticator);
        assertEquals(revealedMACs, message.revealedMacs);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructDataMessage4IllegalProtocolVersion3() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Version.THREE, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY,
                DH_PUBLIC_KEY, content, authenticator, revealedMACs);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructDataMessage4IllegalProtocolVersion2() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Session.Version.TWO, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY,
                DH_PUBLIC_KEY, content, authenticator, revealedMACs);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructDataMessage4NullSenderTag() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Version.FOUR, null, HIGHEST_TAG, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY,
                DH_PUBLIC_KEY, content, authenticator, revealedMACs);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructDataMessage4NullReceiverTag() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Version.FOUR, SMALLEST_TAG, null, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY,
                DH_PUBLIC_KEY, content, authenticator, revealedMACs);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructDataMessage4NullECDHPublicKey() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0, null, DH_PUBLIC_KEY,
                content, authenticator, revealedMACs);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructDataMessage4NullCiphertext() {
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Session.Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY, DH_PUBLIC_KEY,
                null, authenticator, revealedMACs);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructDataMessage4NullAuthenticator() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY, DH_PUBLIC_KEY,
                content, null, revealedMACs);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructDataMessage4AuthenticatorTooSmall() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[63]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY, DH_PUBLIC_KEY,
                content, authenticator, revealedMACs);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructDataMessage4AuthenticatorTooLarge() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[65]);
        final byte[] revealedMACs = new byte[0];
        new DataMessage4(Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY, DH_PUBLIC_KEY,
                content, authenticator, revealedMACs);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructDataMessage4NullRevealedMACs() {
        final byte[] content = randomBytes(RANDOM, new byte[RANDOM.nextInt(10000)]);
        final byte[] authenticator = randomBytes(RANDOM, new byte[64]);
        new DataMessage4(Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0, ECDH_PUBLIC_KEY, DH_PUBLIC_KEY,
                content, authenticator, null);
    }

    @Test
    public void testWriteDataMessage4() throws IOException, OtrCryptoException {
        final byte[] expected = new byte[] {0, 4, 3, 0, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0, 0, 0, 1, -128, -18, 75, -107, -42, -98, 107, -75, 67, -11, -95, -76, -35, -62, -15, -20, 73, 13, 116, -52, 127, -127, -98, 1, 98, 29, -63, -66, -102, -86, 76, 14, 87, 47, -107, 92, -84, 6, 21, 127, -58, 36, 9, -52, -103, -28, 53, 85, -32, 114, 119, 74, 35, 19, 122, -66, 3, -36, 9, -105, 53, 10, 68, 29, 90, 44, 97, -123, -123, -47, -71, 25, -23, -3, 51, 107, 101, 83, 102, 86, -100, -118, 66, 59, -94, 124, 61, 112, -44, -31, 118, -43, 58, 69, 7, -19, -109, 85, 101, 10, -122, 76, -106, -92, 59, -63, -90, 43, 36, 94, -23, -123, -64, -7, 73, 26, 0, 17, 52, 7, -54, 10, 105, -50, 111, -46, -14, -108, 8, 60, -31, -31, -48, 64, -69, -89, -4, -42, 61, -21, 50, -78, 6, 47, 10, -70, -64, 39, 64, 39, -84, -53, -124, 49, -106, -102, 92, -60, 64, 28, 115, -48, -128, 103, -123, -121, 70, -83, 63, -106, 64, 14, -6, 4, 92, 15, -91, 55, 8, 1, 85, -65, -40, -37, 120, 68, -124, 100, 76, 10, 70, 50, -120, -57, 29, -2, 27, -43, 29, -118, 66, -88, 31, 42, -61, 68, 76, 64, -49, -29, 126, 118, 16, -90, -53, 54, 100, 75, -18, -38, 38, 67, 51, 118, -120, 68, -74, 52, -25, 54, -21, 66, 99, -109, -116, 66, 69, 110, -17, -117, 118, 53, -64, -125, -62, -112, 91, 88, 16, -117, 121, -87, 63, -42, 39, -35, 100, 81, 45, 56, 13, 69, 64, -64, 55, 67, 88, -66, 0, 127, -23, 3, 46, 58, -127, -90, -52, -85, -10, 37, -82, 55, 112, -5, 97, -23, 58, -71, 63, 40, 50, 79, -116, 50, 68, 4, 17, -74, -73, -56, 124, -37, 1, -32, -31, 108, -115, 34, -121, -105, -118, -28, 35, 115, 100, -81, -58, -44, -109, -54, 123, -43, -124, 24, 92, 46, -108, 15, 121, -87, 63, 114, -125, -10, -46, -116, -116, -34, 127, 5, -72, -127, 127, -92, 51, -46, 34, -84, -125, 82, -76, 25, 21, 73, 59, -91, -77, -80, 90, -4, -3, 83, -115, -115, -22, 50, 84, 58, -19, 93, 46, 113, 63, 13, 64, 37, -71, 126, 0, 71, -91, -77, 99, 83, -66, 0, 0, 3, -24, -14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47, 120, -5, 83, -51, -98, 99, 4, 55, -79, 125, 70, -78, 8, 95, -25, 44, -15, 2, 30, -37, 0, -15, -78, -105, 69, 48, -108, 108, 63, -71, 106, -2, 115, 40, 58, 91, -9, 93, 117, 115, 72, 108, 50, -4, 120, -23, 59, 106, 85, -59, 38, -56, 97, -75, -85, 54, 13, -115, -77, 89, -93, 54, 64, -5, 0, 0, 0, 0};
        final Point ecdhPublicKey = new OtrInputStream(new byte[] {-90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0})
                .readPoint();
        final BigInteger dhPublicKey = new OtrInputStream(new byte[] {0, 0, 1, -128, -18, 75, -107, -42, -98, 107, -75, 67, -11, -95, -76, -35, -62, -15, -20, 73, 13, 116, -52, 127, -127, -98, 1, 98, 29, -63, -66, -102, -86, 76, 14, 87, 47, -107, 92, -84, 6, 21, 127, -58, 36, 9, -52, -103, -28, 53, 85, -32, 114, 119, 74, 35, 19, 122, -66, 3, -36, 9, -105, 53, 10, 68, 29, 90, 44, 97, -123, -123, -47, -71, 25, -23, -3, 51, 107, 101, 83, 102, 86, -100, -118, 66, 59, -94, 124, 61, 112, -44, -31, 118, -43, 58, 69, 7, -19, -109, 85, 101, 10, -122, 76, -106, -92, 59, -63, -90, 43, 36, 94, -23, -123, -64, -7, 73, 26, 0, 17, 52, 7, -54, 10, 105, -50, 111, -46, -14, -108, 8, 60, -31, -31, -48, 64, -69, -89, -4, -42, 61, -21, 50, -78, 6, 47, 10, -70, -64, 39, 64, 39, -84, -53, -124, 49, -106, -102, 92, -60, 64, 28, 115, -48, -128, 103, -123, -121, 70, -83, 63, -106, 64, 14, -6, 4, 92, 15, -91, 55, 8, 1, 85, -65, -40, -37, 120, 68, -124, 100, 76, 10, 70, 50, -120, -57, 29, -2, 27, -43, 29, -118, 66, -88, 31, 42, -61, 68, 76, 64, -49, -29, 126, 118, 16, -90, -53, 54, 100, 75, -18, -38, 38, 67, 51, 118, -120, 68, -74, 52, -25, 54, -21, 66, 99, -109, -116, 66, 69, 110, -17, -117, 118, 53, -64, -125, -62, -112, 91, 88, 16, -117, 121, -87, 63, -42, 39, -35, 100, 81, 45, 56, 13, 69, 64, -64, 55, 67, 88, -66, 0, 127, -23, 3, 46, 58, -127, -90, -52, -85, -10, 37, -82, 55, 112, -5, 97, -23, 58, -71, 63, 40, 50, 79, -116, 50, 68, 4, 17, -74, -73, -56, 124, -37, 1, -32, -31, 108, -115, 34, -121, -105, -118, -28, 35, 115, 100, -81, -58, -44, -109, -54, 123, -43, -124, 24, 92, 46, -108, 15, 121, -87, 63, 114, -125, -10, -46, -116, -116, -34, 127, 5, -72, -127, 127, -92, 51, -46, 34, -84, -125, 82, -76, 25, 21, 73, 59, -91, -77, -80, 90, -4, -3, 83, -115, -115, -22, 50, 84, 58, -19, 93, 46, 113, 63, 13, 64, 37, -71, 126, 0, 71, -91, -77, 99, 83, -66})
                .readBigInt();
        final byte[] content = new byte[] {-14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47};
        final byte[] authenticator = new byte[] {120, -5, 83, -51, -98, 99, 4, 55, -79, 125, 70, -78, 8, 95, -25, 44, -15, 2, 30, -37, 0, -15, -78, -105, 69, 48, -108, 108, 63, -71, 106, -2, 115, 40, 58, 91, -9, 93, 117, 115, 72, 108, 50, -4, 120, -23, 59, 106, 85, -59, 38, -56, 97, -75, -85, 54, 13, -115, -77, 89, -93, 54, 64, -5};
        final byte[] revealedMACs = new byte[0];
        final DataMessage4 message = new DataMessage4(Session.Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0,
                ecdhPublicKey, dhPublicKey, content, authenticator, revealedMACs);
        final OtrOutputStream out = new OtrOutputStream();
        message.writeTo(out);
        assertArrayEquals(expected, out.toByteArray());
    }

    @Test
    public void testWriteDataMessage4WithoutDHPublicKey() throws IOException, OtrCryptoException {
        final byte[] expected = new byte[] {0, 4, 3, 0, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0, 0, 0, 0, 0, 0, 0, 3, -24, -14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47, 120, -5, 83, -51, -98, 99, 4, 55, -79, 125, 70, -78, 8, 95, -25, 44, -15, 2, 30, -37, 0, -15, -78, -105, 69, 48, -108, 108, 63, -71, 106, -2, 115, 40, 58, 91, -9, 93, 117, 115, 72, 108, 50, -4, 120, -23, 59, 106, 85, -59, 38, -56, 97, -75, -85, 54, 13, -115, -77, 89, -93, 54, 64, -5, 0, 0, 0, 0};
        final Point ecdhPublicKey = new OtrInputStream(new byte[] {-90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0})
                .readPoint();
        final byte[] content = new byte[] {-14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47};
        final byte[] authenticator = new byte[] {120, -5, 83, -51, -98, 99, 4, 55, -79, 125, 70, -78, 8, 95, -25, 44, -15, 2, 30, -37, 0, -15, -78, -105, 69, 48, -108, 108, 63, -71, 106, -2, 115, 40, 58, 91, -9, 93, 117, 115, 72, 108, 50, -4, 120, -23, 59, 106, 85, -59, 38, -56, 97, -75, -85, 54, 13, -115, -77, 89, -93, 54, 64, -5};
        final byte[] revealedMACs = new byte[0];
        final DataMessage4 message = new DataMessage4(Session.Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0,
                ecdhPublicKey, null, content, authenticator, revealedMACs);
        final OtrOutputStream out = new OtrOutputStream();
        message.writeTo(out);
        assertArrayEquals(expected, out.toByteArray());
    }

    @Test
    public void testWriteDataMessage4DataMessageSections() throws IOException, OtrCryptoException {
        final byte[] expected = new byte[] {0, 4, 3, 0, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0, 0, 0, 1, -128, -18, 75, -107, -42, -98, 107, -75, 67, -11, -95, -76, -35, -62, -15, -20, 73, 13, 116, -52, 127, -127, -98, 1, 98, 29, -63, -66, -102, -86, 76, 14, 87, 47, -107, 92, -84, 6, 21, 127, -58, 36, 9, -52, -103, -28, 53, 85, -32, 114, 119, 74, 35, 19, 122, -66, 3, -36, 9, -105, 53, 10, 68, 29, 90, 44, 97, -123, -123, -47, -71, 25, -23, -3, 51, 107, 101, 83, 102, 86, -100, -118, 66, 59, -94, 124, 61, 112, -44, -31, 118, -43, 58, 69, 7, -19, -109, 85, 101, 10, -122, 76, -106, -92, 59, -63, -90, 43, 36, 94, -23, -123, -64, -7, 73, 26, 0, 17, 52, 7, -54, 10, 105, -50, 111, -46, -14, -108, 8, 60, -31, -31, -48, 64, -69, -89, -4, -42, 61, -21, 50, -78, 6, 47, 10, -70, -64, 39, 64, 39, -84, -53, -124, 49, -106, -102, 92, -60, 64, 28, 115, -48, -128, 103, -123, -121, 70, -83, 63, -106, 64, 14, -6, 4, 92, 15, -91, 55, 8, 1, 85, -65, -40, -37, 120, 68, -124, 100, 76, 10, 70, 50, -120, -57, 29, -2, 27, -43, 29, -118, 66, -88, 31, 42, -61, 68, 76, 64, -49, -29, 126, 118, 16, -90, -53, 54, 100, 75, -18, -38, 38, 67, 51, 118, -120, 68, -74, 52, -25, 54, -21, 66, 99, -109, -116, 66, 69, 110, -17, -117, 118, 53, -64, -125, -62, -112, 91, 88, 16, -117, 121, -87, 63, -42, 39, -35, 100, 81, 45, 56, 13, 69, 64, -64, 55, 67, 88, -66, 0, 127, -23, 3, 46, 58, -127, -90, -52, -85, -10, 37, -82, 55, 112, -5, 97, -23, 58, -71, 63, 40, 50, 79, -116, 50, 68, 4, 17, -74, -73, -56, 124, -37, 1, -32, -31, 108, -115, 34, -121, -105, -118, -28, 35, 115, 100, -81, -58, -44, -109, -54, 123, -43, -124, 24, 92, 46, -108, 15, 121, -87, 63, 114, -125, -10, -46, -116, -116, -34, 127, 5, -72, -127, 127, -92, 51, -46, 34, -84, -125, 82, -76, 25, 21, 73, 59, -91, -77, -80, 90, -4, -3, 83, -115, -115, -22, 50, 84, 58, -19, 93, 46, 113, 63, 13, 64, 37, -71, 126, 0, 71, -91, -77, 99, 83, -66, 0, 0, 3, -24, -14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47};
        final Point ecdhPublicKey = new OtrInputStream(new byte[] {-90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0})
                .readPoint();
        final BigInteger dhPublicKey = new OtrInputStream(new byte[] {0, 0, 1, -128, -18, 75, -107, -42, -98, 107, -75, 67, -11, -95, -76, -35, -62, -15, -20, 73, 13, 116, -52, 127, -127, -98, 1, 98, 29, -63, -66, -102, -86, 76, 14, 87, 47, -107, 92, -84, 6, 21, 127, -58, 36, 9, -52, -103, -28, 53, 85, -32, 114, 119, 74, 35, 19, 122, -66, 3, -36, 9, -105, 53, 10, 68, 29, 90, 44, 97, -123, -123, -47, -71, 25, -23, -3, 51, 107, 101, 83, 102, 86, -100, -118, 66, 59, -94, 124, 61, 112, -44, -31, 118, -43, 58, 69, 7, -19, -109, 85, 101, 10, -122, 76, -106, -92, 59, -63, -90, 43, 36, 94, -23, -123, -64, -7, 73, 26, 0, 17, 52, 7, -54, 10, 105, -50, 111, -46, -14, -108, 8, 60, -31, -31, -48, 64, -69, -89, -4, -42, 61, -21, 50, -78, 6, 47, 10, -70, -64, 39, 64, 39, -84, -53, -124, 49, -106, -102, 92, -60, 64, 28, 115, -48, -128, 103, -123, -121, 70, -83, 63, -106, 64, 14, -6, 4, 92, 15, -91, 55, 8, 1, 85, -65, -40, -37, 120, 68, -124, 100, 76, 10, 70, 50, -120, -57, 29, -2, 27, -43, 29, -118, 66, -88, 31, 42, -61, 68, 76, 64, -49, -29, 126, 118, 16, -90, -53, 54, 100, 75, -18, -38, 38, 67, 51, 118, -120, 68, -74, 52, -25, 54, -21, 66, 99, -109, -116, 66, 69, 110, -17, -117, 118, 53, -64, -125, -62, -112, 91, 88, 16, -117, 121, -87, 63, -42, 39, -35, 100, 81, 45, 56, 13, 69, 64, -64, 55, 67, 88, -66, 0, 127, -23, 3, 46, 58, -127, -90, -52, -85, -10, 37, -82, 55, 112, -5, 97, -23, 58, -71, 63, 40, 50, 79, -116, 50, 68, 4, 17, -74, -73, -56, 124, -37, 1, -32, -31, 108, -115, 34, -121, -105, -118, -28, 35, 115, 100, -81, -58, -44, -109, -54, 123, -43, -124, 24, 92, 46, -108, 15, 121, -87, 63, 114, -125, -10, -46, -116, -116, -34, 127, 5, -72, -127, 127, -92, 51, -46, 34, -84, -125, 82, -76, 25, 21, 73, 59, -91, -77, -80, 90, -4, -3, 83, -115, -115, -22, 50, 84, 58, -19, 93, 46, 113, 63, 13, 64, 37, -71, 126, 0, 71, -91, -77, 99, 83, -66})
                .readBigInt();
        final byte[] content = new byte[] {-14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47};
        final byte[] authenticator = new byte[] {120, -5, 83, -51, -98, 99, 4, 55, -79, 125, 70, -78, 8, 95, -25, 44, -15, 2, 30, -37, 0, -15, -78, -105, 69, 48, -108, 108, 63, -71, 106, -2, 115, 40, 58, 91, -9, 93, 117, 115, 72, 108, 50, -4, 120, -23, 59, 106, 85, -59, 38, -56, 97, -75, -85, 54, 13, -115, -77, 89, -93, 54, 64, -5};
        final byte[] revealedMACs = new byte[0];
        final DataMessage4 message = new DataMessage4(Session.Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0,
                ecdhPublicKey, dhPublicKey, content, authenticator, revealedMACs);
        final OtrOutputStream out = new OtrOutputStream();
        message.writeDataMessageSections(out);
        assertArrayEquals(expected, out.toByteArray());
    }

    @Test
    public void testWriteDataMessage4DataMessageSectionsWithoutDHPublicKey() throws IOException, OtrCryptoException {
        final byte[] expected = new byte[] {0, 4, 3, 0, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0, 0, 0, 0, 0, 0, 0, 3, -24, -14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47};
        final Point ecdhPublicKey = new OtrInputStream(new byte[] {-90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0})
                .readPoint();
        final byte[] content = new byte[] {-14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47};
        final byte[] authenticator = new byte[] {120, -5, 83, -51, -98, 99, 4, 55, -79, 125, 70, -78, 8, 95, -25, 44, -15, 2, 30, -37, 0, -15, -78, -105, 69, 48, -108, 108, 63, -71, 106, -2, 115, 40, 58, 91, -9, 93, 117, 115, 72, 108, 50, -4, 120, -23, 59, 106, 85, -59, 38, -56, 97, -75, -85, 54, 13, -115, -77, 89, -93, 54, 64, -5};
        final byte[] revealedMACs = new byte[0];
        final DataMessage4 message = new DataMessage4(Session.Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0,
                ecdhPublicKey, null, content, authenticator, revealedMACs);
        final OtrOutputStream out = new OtrOutputStream();
        message.writeDataMessageSections(out);
        assertArrayEquals(expected, out.toByteArray());
    }

    @Test
    public void testWriteDataMessage4DataMessageSectionsContainedInFullSerialization() throws IOException, OtrCryptoException {
        final Point ecdhPublicKey = new OtrInputStream(new byte[] {-90, -126, -41, 41, 110, -103, -116, -14, -121, -14, 123, 121, 40, -18, 86, 103, -38, 52, -103, -114, -37, -122, 76, 98, -60, -69, 2, -89, 59, 123, -107, -48, -28, 109, 117, -91, 48, -66, -65, 3, 78, -57, 88, 78, -56, 58, -21, -52, -115, 109, 75, -32, -38, -69, -50, -94, 0})
                .readPoint();
        final BigInteger dhPublicKey = new OtrInputStream(new byte[] {0, 0, 1, -128, -18, 75, -107, -42, -98, 107, -75, 67, -11, -95, -76, -35, -62, -15, -20, 73, 13, 116, -52, 127, -127, -98, 1, 98, 29, -63, -66, -102, -86, 76, 14, 87, 47, -107, 92, -84, 6, 21, 127, -58, 36, 9, -52, -103, -28, 53, 85, -32, 114, 119, 74, 35, 19, 122, -66, 3, -36, 9, -105, 53, 10, 68, 29, 90, 44, 97, -123, -123, -47, -71, 25, -23, -3, 51, 107, 101, 83, 102, 86, -100, -118, 66, 59, -94, 124, 61, 112, -44, -31, 118, -43, 58, 69, 7, -19, -109, 85, 101, 10, -122, 76, -106, -92, 59, -63, -90, 43, 36, 94, -23, -123, -64, -7, 73, 26, 0, 17, 52, 7, -54, 10, 105, -50, 111, -46, -14, -108, 8, 60, -31, -31, -48, 64, -69, -89, -4, -42, 61, -21, 50, -78, 6, 47, 10, -70, -64, 39, 64, 39, -84, -53, -124, 49, -106, -102, 92, -60, 64, 28, 115, -48, -128, 103, -123, -121, 70, -83, 63, -106, 64, 14, -6, 4, 92, 15, -91, 55, 8, 1, 85, -65, -40, -37, 120, 68, -124, 100, 76, 10, 70, 50, -120, -57, 29, -2, 27, -43, 29, -118, 66, -88, 31, 42, -61, 68, 76, 64, -49, -29, 126, 118, 16, -90, -53, 54, 100, 75, -18, -38, 38, 67, 51, 118, -120, 68, -74, 52, -25, 54, -21, 66, 99, -109, -116, 66, 69, 110, -17, -117, 118, 53, -64, -125, -62, -112, 91, 88, 16, -117, 121, -87, 63, -42, 39, -35, 100, 81, 45, 56, 13, 69, 64, -64, 55, 67, 88, -66, 0, 127, -23, 3, 46, 58, -127, -90, -52, -85, -10, 37, -82, 55, 112, -5, 97, -23, 58, -71, 63, 40, 50, 79, -116, 50, 68, 4, 17, -74, -73, -56, 124, -37, 1, -32, -31, 108, -115, 34, -121, -105, -118, -28, 35, 115, 100, -81, -58, -44, -109, -54, 123, -43, -124, 24, 92, 46, -108, 15, 121, -87, 63, 114, -125, -10, -46, -116, -116, -34, 127, 5, -72, -127, 127, -92, 51, -46, 34, -84, -125, 82, -76, 25, 21, 73, 59, -91, -77, -80, 90, -4, -3, 83, -115, -115, -22, 50, 84, 58, -19, 93, 46, 113, 63, 13, 64, 37, -71, 126, 0, 71, -91, -77, 99, 83, -66})
                .readBigInt();
        final byte[] content = new byte[] {-14, 5, -54, 114, 60, 102, -90, 116, 97, 19, -26, -34, 102, -87, -116, 9, -54, -29, 122, 98, -99, -98, 39, -22, 56, 125, -105, 48, -51, 23, -65, 21, -64, 22, -17, -18, -110, 25, 6, 50, -50, -89, -102, -121, -110, -30, -7, -60, -74, 100, -80, 93, -104, -67, -66, -49, -7, 118, -112, 113, -44, 127, -77, 37, 77, 2, -71, 31, -108, -92, 2, -105, 14, -66, -114, 14, 115, -37, -53, 58, 127, -47, -14, 22, 26, -126, 39, 42, 25, 122, 94, -94, 99, -75, -117, -39, -32, 37, -36, -80, 55, -43, -120, -16, -47, 34, -99, 119, -107, 102, -119, -66, 90, -48, 93, 103, -30, 79, -59, -37, 117, -52, 114, -105, -63, -45, -65, -19, -128, 96, 38, 0, -117, 71, 57, -33, 59, -15, -119, 75, -34, 46, 37, 67, 93, 42, 121, 34, -61, -15, 24, 70, -85, 85, 71, -21, -20, -77, -99, 114, -58, 33, -64, 75, -35, -67, 41, 103, -42, 0, 105, -61, 97, -20, 124, 80, -52, -21, 118, -45, 108, -111, 32, 12, -66, 108, 40, -81, -38, -18, -124, 25, -77, -4, 61, 95, -73, -128, -125, -21, -1, 71, 36, 59, -98, -69, 126, -41, -55, 95, -47, 65, 36, 59, 25, -83, 123, 28, 8, -84, 38, -117, -8, -16, 79, 102, 7, -103, 105, -72, 118, 39, 1, -2, 102, 76, 86, -8, -8, 42, -46, -64, 31, 122, -67, 107, -98, 91, 32, -37, 108, 119, -34, 17, -83, -62, -78, 123, 113, -73, 36, 17, 41, -84, -75, -101, -37, 1, -54, -36, -23, 23, -65, 120, 120, -108, -62, -61, -93, 103, 110, -17, 92, 0, -106, 105, 47, 105, -80, 53, -95, -5, -73, 57, -82, 94, 36, 50, -76, -24, -106, -41, -18, -50, -83, 5, -19, -9, -95, 73, 75, -81, -8, -124, 31, -57, 51, -80, 123, -3, -68, -80, -24, 37, -50, 101, -44, -52, -116, -47, -90, 26, 52, 70, -80, 42, -99, -76, 117, -61, -57, -87, 27, 37, 76, -13, -70, 28, 121, -22, -110, -106, 109, -15, -90, 78, -13, 74, 0, -125, -21, -119, -60, 89, 108, -5, 24, -9, -7, -58, 49, 51, -66, 58, 73, 86, 118, -52, 102, -2, 26, -63, 41, 34, 114, 83, -122, 70, 115, -83, -32, 30, -65, -106, 85, 94, 41, 17, -55, 84, 105, 53, -108, -105, 49, -64, -93, 3, -120, 15, 20, 62, 26, -77, 60, -66, -96, -94, 121, -128, -107, -85, -17, -74, -80, 57, -114, 109, 83, -86, -96, -53, -126, 32, 112, -89, 75, -43, 51, -57, 49, 80, -47, 36, 106, 85, 116, 44, -58, 35, 98, -56, 21, -113, -124, 60, -54, -33, -65, 64, -9, 12, -82, -8, -124, 82, 38, -15, 98, -22, -104, 116, 125, 122, -53, 107, -24, 37, -80, 115, -6, -38, 73, 62, 17, -80, -50, 21, -106, 88, -62, -33, 22, -79, -114, -37, 105, 112, -25, 32, -22, -35, 43, -121, 48, -7, -2, 67, 36, 122, 1, 40, -87, -98, 75, 23, -5, -113, 55, 50, -116, 119, -41, -30, 106, -51, -102, -19, 6, 75, 47, -80, -126, -118, 11, 39, -99, -111, 101, -65, -53, 84, 24, -25, 59, 102, -92, -5, -68, -116, 113, 24, 78, -12, 32, -126, -39, 63, -77, 100, -82, 50, -86, -124, 30, -64, 91, 95, 49, 6, 56, 16, 124, 78, -80, 76, 82, -18, 60, 39, -23, -113, 17, 62, 0, 6, 115, -8, 78, -126, -25, -107, -118, -109, 36, -59, 96, -114, 38, 10, 103, 56, 97, -6, -92, 54, -117, 52, -117, -44, -17, 123, 72, 9, 110, 109, 65, -37, -106, -125, 51, 126, -14, -102, 4, -96, -24, -99, -46, 34, 33, 68, 36, 15, -62, 25, -92, 35, 105, 7, -128, -33, -46, -33, 65, 60, -87, 72, 106, -59, 125, -69, -125, 40, 83, -15, 24, -68, 60, 75, -28, -80, 119, 74, 64, 79, -37, 2, 102, 59, 79, -114, 69, 122, -123, 26, -92, -110, 79, -99, -23, -53, -121, -11, -97, 88, -10, -58, -36, -18, 21, 28, 89, 19, 117, 97, 87, 10, 7, -99, -45, -35, -31, -90, 24, -95, 54, 33, -19, -128, -28, 54, -98, -9, 101, 61, 91, -73, 115, -104, -6, -109, -43, -47, 91, -20, 125, -116, 57, 4, 82, 76, -72, 60, -94, 82, -85, 12, -110, 1, 12, -84, 83, -115, 73, 69, -20, 33, 9, 50, -1, 86, 79, -1, -75, -64, 1, -102, 120, -1, 0, -87, 80, -110, 114, -60, -2, -15, -80, 125, -41, -35, 39, -121, 120, -78, -98, -4, 48, 117, 25, -84, -30, 119, 33, -28, -57, -82, -71, -115, -52, -115, -32, 32, -84, 90, -110, -62, -83, 119, 117, 24, -1, -105, -5, -53, -38, 3, 79, -75, 53, 110, -31, -41, 72, 43, -9, -56, 18, -110, 88, -112, 63, -32, -1, 110, -114, 120, 9, 90, -24, 102, 54, -37, -111, 35, -97, -3, 112, 90, 92, -39, -91, -73, 104, 104, 60, -16, -16, -47, -61, -47, -98, 105, -42, -18, 38, 10, -65, 107, -100, 99, 75, 63, -104, 79, 85, 40, -92, 119, -84, -27, -12, -44, -2, -128, -92, 99, -106, 58, 47, -110, -32, -13, 14, -32, -121, -9, 82, 24, -11, -116, -123, 28, -70, -5, -5, 96, 78, 37, -88, 19, -46, -63, -82, -107, 74, -123, -95, 120, -83, 47, 65, 122, 122, -75, -113, 13, 55, -112, -98, 72, 30, 79, 124, -110, 95, -16, 72, 127, -6, -107, -123, 44, 51, 53, -126, -14, -103, -103, -110, 126, 89, -9, -76, -119, -56, 11, -56, -1, 39, -93, 57, 109, 46, 46, -118, -105, -49, -62, 113, 109, -98, -23, -67, -2, -49, 6, 95, -40, 30, -125, 127, 95, -23, -57, -91, -102, 76, 48, 77, -85, -96, -17, 114, 109, 102, 74, -106, 50, -102, -103, 112, 91, 10, -102, 43, -101, -77, 47};
        final byte[] authenticator = new byte[] {120, -5, 83, -51, -98, 99, 4, 55, -79, 125, 70, -78, 8, 95, -25, 44, -15, 2, 30, -37, 0, -15, -78, -105, 69, 48, -108, 108, 63, -71, 106, -2, 115, 40, 58, 91, -9, 93, 117, 115, 72, 108, 50, -4, 120, -23, 59, 106, 85, -59, 38, -56, 97, -75, -85, 54, 13, -115, -77, 89, -93, 54, 64, -5};
        final byte[] revealedMACs = new byte[0];
        final DataMessage4 message = new DataMessage4(Version.FOUR, SMALLEST_TAG, HIGHEST_TAG, (byte) 0, 0, 0, 0,
                ecdhPublicKey, dhPublicKey, content, authenticator, revealedMACs);
        // Given the constructed message, produce full serialization and data message sections and ensure that
        // data message sections are part of full serialization.
        final OtrOutputStream out = new OtrOutputStream();
        message.writeDataMessageSections(out);
        final byte[] dataMessageSections = out.toByteArray();
        final byte[] partOfSerialization = copyOfRange(new OtrOutputStream().write(message).toByteArray(), 0,
                dataMessageSections.length);
        assertArrayEquals(dataMessageSections, partOfSerialization);
    }
}