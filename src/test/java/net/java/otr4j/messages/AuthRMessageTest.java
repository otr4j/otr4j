/*
 * otr4j, the open source java otr library.
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 *
 * SPDX-License-Identifier: LGPL-3.0-only
 */

package net.java.otr4j.messages;

import net.java.otr4j.api.ClientProfile;
import net.java.otr4j.api.Session.Version;
import net.java.otr4j.crypto.DHKeyPair;
import net.java.otr4j.crypto.DSAKeyPair;
import net.java.otr4j.crypto.OtrCryptoEngine4.Sigma;
import net.java.otr4j.crypto.OtrCryptoException;
import net.java.otr4j.crypto.ed448.ECDHKeyPair;
import net.java.otr4j.crypto.ed448.EdDSAKeyPair;
import net.java.otr4j.crypto.ed448.Point;
import net.java.otr4j.io.OtrInputStream;
import net.java.otr4j.io.OtrOutputStream;
import org.junit.Test;

import java.math.BigInteger;
import java.net.ProtocolException;
import java.security.SecureRandom;
import java.util.Collections;

import static net.java.otr4j.api.InstanceTag.HIGHEST_TAG;
import static net.java.otr4j.api.InstanceTag.SMALLEST_TAG;
import static net.java.otr4j.crypto.OtrCryptoEngine4.ringSign;
import static net.java.otr4j.util.SecureRandoms.randomBytes;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@SuppressWarnings({"ConstantConditions", "SameParameterValue", "resource"})
public final class AuthRMessageTest {

    private static final SecureRandom RANDOM = new SecureRandom();

    private static final DSAKeyPair DSA_KEYPAIR = DSAKeyPair.generateDSAKeyPair(RANDOM);

    private static final Point FORGING_KEY = ECDHKeyPair.generate(RANDOM).publicKey();

    private static final EdDSAKeyPair ED_DSA_KEYPAIR = EdDSAKeyPair.generate(RANDOM);

    private static final Point X = ECDHKeyPair.generate(RANDOM).publicKey();

    private static final BigInteger A = DHKeyPair.generate(RANDOM).publicKey();

    private static final Point FIRST_ECDH_PUBLIC_KEY = ECDHKeyPair.generate(RANDOM).publicKey();

    private static final BigInteger FIRST_DH_PUBLIC_KEY = DHKeyPair.generate(RANDOM).publicKey();

    private static final ClientProfilePayload PAYLOAD = ClientProfilePayload.signClientProfile(
            new ClientProfile(SMALLEST_TAG, ED_DSA_KEYPAIR.getPublicKey(), FORGING_KEY,
                    Collections.singletonList(Version.FOUR), DSA_KEYPAIR.getPublic()),
            Long.MAX_VALUE / 1000, DSA_KEYPAIR, ED_DSA_KEYPAIR);

    @Test
    public void testConstruction() {
        final byte[] m = randomBytes(RANDOM, new byte[150]);
        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        final AuthRMessage message = new AuthRMessage(SMALLEST_TAG, HIGHEST_TAG, PAYLOAD, X, A, sigma,
                FIRST_ECDH_PUBLIC_KEY, FIRST_DH_PUBLIC_KEY);
        assertEquals(Version.FOUR, message.protocolVersion);
        assertEquals(SMALLEST_TAG, message.senderTag);
        assertEquals(HIGHEST_TAG, message.receiverTag);
        assertEquals(PAYLOAD, message.clientProfile);
        assertEquals(X, message.x);
        assertEquals(A, message.a);
        assertEquals(FIRST_ECDH_PUBLIC_KEY, message.firstECDHPublicKey);
        assertEquals(FIRST_DH_PUBLIC_KEY, message.firstDHPublicKey);
        assertEquals(sigma, message.sigma);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructionNullSenderTag() {
        final byte[] m = randomBytes(RANDOM, new byte[150]);
        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        new AuthRMessage(null, HIGHEST_TAG, PAYLOAD, X, A, sigma, FIRST_ECDH_PUBLIC_KEY, FIRST_DH_PUBLIC_KEY);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructionNullReceiverTag() {
        final byte[] m = randomBytes(RANDOM, new byte[150]);
        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        new AuthRMessage(SMALLEST_TAG, null, PAYLOAD, X, A, sigma, FIRST_ECDH_PUBLIC_KEY, FIRST_DH_PUBLIC_KEY);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructionNullClientProfilePayload() {
        final byte[] m = randomBytes(RANDOM, new byte[150]);
        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        new AuthRMessage(SMALLEST_TAG, HIGHEST_TAG, null, X, A, sigma, FIRST_ECDH_PUBLIC_KEY, FIRST_DH_PUBLIC_KEY);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructionNullX() {
        final byte[] m = randomBytes(RANDOM, new byte[150]);
        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        new AuthRMessage(SMALLEST_TAG, HIGHEST_TAG, PAYLOAD, null, A, sigma, FIRST_ECDH_PUBLIC_KEY, FIRST_DH_PUBLIC_KEY);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructionNullA() {
        final byte[] m = randomBytes(RANDOM, new byte[150]);
        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        new AuthRMessage(SMALLEST_TAG, HIGHEST_TAG, PAYLOAD, X, null, sigma, FIRST_ECDH_PUBLIC_KEY, FIRST_DH_PUBLIC_KEY);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructionNullSigma() {
        new AuthRMessage(SMALLEST_TAG, HIGHEST_TAG, PAYLOAD, X, A, null, FIRST_ECDH_PUBLIC_KEY, FIRST_DH_PUBLIC_KEY);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructionNullFirstECDH() {
        final byte[] m = randomBytes(RANDOM, new byte[150]);
        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        new AuthRMessage(SMALLEST_TAG, HIGHEST_TAG, PAYLOAD, X, A, sigma, null, FIRST_DH_PUBLIC_KEY);
    }

    @Test(expected = NullPointerException.class)
    public void testConstructionNullFirstDH() {
        final byte[] m = randomBytes(RANDOM, new byte[150]);
        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        new AuthRMessage(SMALLEST_TAG, HIGHEST_TAG, PAYLOAD, X, A, sigma, FIRST_ECDH_PUBLIC_KEY, null);
    }

    @Test
    public void testEncodeMessage() throws ProtocolException, OtrCryptoException, ValidationException {
//        final ClientProfilePayload payload = PAYLOAD;
        final ClientProfilePayload payload = ClientProfilePayload.readFrom(new OtrInputStream(new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 16, 0, 99, -47, 79, -29, 95, 43, 21, 46, -9, -39, 103, 17, -104, 108, -64, 25, -8, -10, -103, 34, -52, 24, 14, -37, 72, -12, 16, 53, 1, 118, 93, 120, -113, -24, 105, -123, 108, -108, 34, 114, 121, -114, 97, 108, -1, 53, -112, 86, 10, 13, 41, -44, -88, -63, 57, -75, -128, 0, 3, 18, 0, -60, -89, -123, 6, 87, -53, 12, 51, -40, -6, -4, 110, 96, -34, 116, 115, 68, -79, -58, -61, 97, 57, -75, -94, -45, -1, -60, -9, -67, 8, 106, 9, -104, -52, 37, -16, 121, -65, -64, -127, -114, 10, -29, -115, 26, 29, -98, -25, 92, 110, 88, 100, 57, -104, 49, -28, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 96, -109, -37, 122, -15, -21, -71, -31, -59, 114, 72, 114, 19, -50, 67, -114, -91, -47, -33, -27, -104, -34, 29, 8, -26, 8, -98, -71, -24, -104, 1, 80, -99, -112, -98, 22, -41, 126, 75, 34, 85, -50, -9, -102, 24, -29, -12, -26, 121, 59, 25, 51, 100, 109, 10, -9, 73, -122, -98, -98, -71, -71, 58, 64, -125, 64, 96, -106, 40, 56, -3, 6, -28, -97, 87, -123, 39, -117, 72, 125, -74, -113, -45, 103, 2, -100, 78, 73, 49, -111, -98, -95, 92, 35, 113, 18, 120, 45, 47, -126, -18, -32, -97, -33, 11, 81, -98, 4, 57, -40, -79, 62, 111, 51, -15, -43, -75, -93, -38, -74, -31, -77, 77, -13, -63, -121, 89, 50, 0, 7, 0, 0, 0, 20, 23, 53, 52, -5, -7, -64, 108, -13, -128, -23, -111, 1, -35, 117, -32, -50, -95, 122, -39, -3, 0, 0, 0, 20, 97, -52, 9, -111, 58, -31, -21, -72, -27, -85, 53, 68, -109, 125, 116, 105, -76, 9, 122, -120, -85, 47, -15, -119, 113, 118, 86, 91, 69, -29, 89, -21, 90, 35, -30, -100, -66, -47, -48, -93, 84, -13, -59, -67, -6, 24, 110, -9, -83, 16, -90, -73, 58, -17, 14, 66, 91, 106, -109, -118, 125, 112, 55, -36, 15, -10, -7, 15, 16, 75, 95, -21, -43, 105, -96, -95, -128, 15, 3, -127, 66, 30, 38, -33, -108, -97, -115, 13, 113, -51, 116, -3, -44, 49, 53, -11, -117, -117, 2, 66, 37, 23, -11, -116, 110, -32, -71, -4, -108, 97, -22, 92, -49, -42, -92, -16, 19, 40, -41, 93, 71, 7, -60, -9, -124, -16, -69, 97, -6, -60, 48, 77, 57, 0}));
//        System.err.println("Payload: " + Arrays.toString(new OtrOutputStream().write(payload).toByteArray()));
//        final Point x = X;
        final Point x = new OtrInputStream(new byte[] {6, 72, -16, -52, 32, 78, -115, -111, -61, -12, 48, -15, -9, -47, 12, 18, -53, 0, 91, 127, 38, 49, -82, 70, 17, -17, -73, 63, 9, -28, -11, -119, -92, 5, 29, 46, -39, -87, 102, 90, -8, 64, 95, -45, 52, 52, 81, 8, 103, -50, 76, 9, -85, -12, 37, 21, -128})
                .readPoint();
//        System.err.println("X: " + Arrays.toString(x.encode()));
//        final BigInteger a = A;
        final BigInteger a = new OtrInputStream(new byte[] {0, 0, 1, -128, 97, -89, 99, 35, 126, 23, 69, 75, 55, -45, 108, -99, 12, 52, -42, -22, 55, 13, 124, -97, 4, -42, -59, -46, -8, -43, 113, -109, -38, 65, -108, 46, 121, -89, -36, -123, -39, 41, -52, 108, 78, -128, 71, 22, 82, -10, -117, -93, -32, -119, 107, -66, -7, -29, -10, 112, 116, 85, -116, 63, -122, 8, 18, 68, -69, 53, 112, -109, -78, -103, 80, -12, 3, -104, 28, 43, -56, -44, -105, -127, 112, 58, -13, 15, -4, 52, 41, -9, 29, 90, 48, 67, -66, 103, -17, 63, -38, 93, 121, -86, -112, 98, 117, -28, -28, -62, 40, -75, 13, -72, -2, 119, 10, -97, -96, 119, 20, -11, 114, -34, -121, -73, 110, -107, -111, -106, 5, -4, -82, 63, 123, -119, 124, 44, -117, -76, 65, 49, -49, 33, -58, -92, 116, -55, -71, 122, -117, 15, -38, -97, -63, 6, -121, 98, 70, -69, 86, 41, 73, 96, 45, 95, 51, -92, -23, -69, 92, 46, 61, -32, 52, 0, -128, -4, -26, 16, 44, 127, -34, -84, 64, -65, -61, 37, -19, 3, -15, 53, -59, -8, 60, -57, 47, -28, 17, 34, 69, -61, 59, 34, -51, -2, 1, -122, 45, 23, 79, 65, 104, 58, -42, -33, -119, 127, -127, 113, -13, 36, 19, -87, 44, -109, -91, -110, -120, 4, 81, -102, -105, 65, 94, 26, -103, -106, -50, -10, -128, 78, 12, 48, -23, -33, 24, -36, -44, 48, 109, -2, -66, -40, 5, -62, 78, 55, -65, 77, 92, -109, -90, -41, 31, 58, 118, 35, -106, 7, 32, 45, -77, 127, -101, -114, 121, -1, -113, -37, 30, 59, 99, -30, -36, -99, 61, -84, -40, 80, 47, -71, 23, -74, -57, -35, 18, 71, -4, -36, 111, 44, -128, 46, -6, 121, 1, 83, 47, 2, 119, -33, -50, 36, 80, 92, -101, -47, 59, -77, -32, 120, -84, -126, 111, -1, -23, -48, 5, 101, -120, -40, -43, -83, 97, 108, 97, 96, -126, -99, -106, -70, -93, 96, -71, -91, 57, -71, 47, 2, -67, -50, -123, 64, -128, -9, 121, -63, -73, -82, 51, -76, 83, 99, -20, -54, -104, 38, 100, 85, 114, -85, 87, -95, 45, 59, 112, 34, -16, -69, 78, 114, -3, 66, -69, 82, -126, -58})
                .readBigInt();
//        System.err.println("A: " + Arrays.toString(new OtrOutputStream().writeBigInt(a).toByteArray()));
//        final byte[] m = new byte[] {73, 109, 25, -111, -118, -45, -9, -59, 2, 117, 8, 47, -67, -61, 21, 54, 106, 41, -105, 108, 111, 126, 29, 82, -14, 44, -92, -23, 89, 66, 104, 79, -93, -70, 26, -125, -16, -121, 22, -76, -107, 120, 72, -19, 22, -6, 98, 89, -99, 87, -127, -128, -86, -23, -124, 56, 0, -84, -60, -90, -59, 12, 103, -75, -92, -7, -42, -122, -105, 87, 46, -47, 39, 124, -84, -1, -81, -21, -29, -123, -15, 116, 5, -29, -115, -111, 83, 58, -95, 36, 49, -102, 90, -56, -76, -79, -74, 7, 16, -84, -74, -67, 101, -107, -108, -21, -94, -119, 121, -31, 113, -118, 1, 0, -14, -71, 108, -80, 46, 127, 39, 94, -87, 4, 73, -63, -9, 91, -10, -29, -17, -4, 65, -11, -57, -126, 39, 48, -88, -19, -6, -104, 111, 10, 71, 82, 65, 111, -107, -128, 50, -126, -118, 85, 110, 125, 91, 10, -68, 29, 119, 3, -20, -72, -63, 27, -8, 61, 78, 57, 0, 107, -30, -42, -71, 0, -26, 91, 56, -54, -36, -35, -60, -3, -14, -117, -61, -87, 104, -69, 125, 1, 51, 20, 118, -29, -83, 49, 7, -60, -31, -21, 71, 0, 70, 55, -60, -93, 36, 85, -125, -29, 123, 89, 44, 5, 122, 99, -11, -73, 104, 5, 20, 2, -102, 79, 7, 0, -58, -114, -114, 110, -29, -55, 81, -33, 74, -103, -103, 71, 89, 98, 49, 44, 100, 67, -9, 37, -107, 84, -33, -125, -113, -66, 121, 111, 124, 99, -8, 105, 6, -126, 69, 0, -44, -70, 117, -48, -87, 126, 121, 19, 22, -4, 18, -99, -84, 70, 24, 27, -17, 46, 98, 45, 0, -94, 116, -9, -47, -36, 11, 127, 52, 50, -53, -13, -54, 55, -47, 24, -90, 7, -88, 38, -112, -56, 68, 93, -77, 92, -55, 56, 120, -122, -38, 3, 47, -112, 99, -40, -53, 107, 43, 52, -53, 68, 65, 73, -104, 101, -60, -97, -116, -34, 15, 84, -49, -14, 55, -8, 48, 0};
//        final Sigma sigma = generateSigma(ED_DSA_KEYPAIR, m);
        final Sigma sigma = Sigma.readFrom(new OtrInputStream(new byte[] {73, 109, 25, -111, -118, -45, -9, -59, 2, 117, 8, 47, -67, -61, 21, 54, 106, 41, -105, 108, 111, 126, 29, 82, -14, 44, -92, -23, 89, 66, 104, 79, -93, -70, 26, -125, -16, -121, 22, -76, -107, 120, 72, -19, 22, -6, 98, 89, -99, 87, -127, -128, -86, -23, -124, 56, 0, -84, -60, -90, -59, 12, 103, -75, -92, -7, -42, -122, -105, 87, 46, -47, 39, 124, -84, -1, -81, -21, -29, -123, -15, 116, 5, -29, -115, -111, 83, 58, -95, 36, 49, -102, 90, -56, -76, -79, -74, 7, 16, -84, -74, -67, 101, -107, -108, -21, -94, -119, 121, -31, 113, -118, 1, 0, -14, -71, 108, -80, 46, 127, 39, 94, -87, 4, 73, -63, -9, 91, -10, -29, -17, -4, 65, -11, -57, -126, 39, 48, -88, -19, -6, -104, 111, 10, 71, 82, 65, 111, -107, -128, 50, -126, -118, 85, 110, 125, 91, 10, -68, 29, 119, 3, -20, -72, -63, 27, -8, 61, 78, 57, 0, 107, -30, -42, -71, 0, -26, 91, 56, -54, -36, -35, -60, -3, -14, -117, -61, -87, 104, -69, 125, 1, 51, 20, 118, -29, -83, 49, 7, -60, -31, -21, 71, 0, 70, 55, -60, -93, 36, 85, -125, -29, 123, 89, 44, 5, 122, 99, -11, -73, 104, 5, 20, 2, -102, 79, 7, 0, -58, -114, -114, 110, -29, -55, 81, -33, 74, -103, -103, 71, 89, 98, 49, 44, 100, 67, -9, 37, -107, 84, -33, -125, -113, -66, 121, 111, 124, 99, -8, 105, 6, -126, 69, 0, -44, -70, 117, -48, -87, 126, 121, 19, 22, -4, 18, -99, -84, 70, 24, 27, -17, 46, 98, 45, 0, -94, 116, -9, -47, -36, 11, 127, 52, 50, -53, -13, -54, 55, -47, 24, -90, 7, -88, 38, -112, -56, 68, 93, -77, 92, -55, 56, 120, -122, -38, 3, 47, -112, 99, -40, -53, 107, 43, 52, -53, 68, 65, 73, -104, 101, -60, -97, -116, -34, 15, 84, -49, -14, 55, -8, 48, 0}));
//        System.err.println("Sigma: " + Arrays.toString(new OtrOutputStream().write(sigma).toByteArray()));
//        final Point firstECDHPublicKey = FIRST_ECDH_PUBLIC_KEY;
        final Point firstECDHPublicKey = new OtrInputStream(new byte[] {123, 68, -80, 102, 86, -38, -120, 58, 70, 9, 101, -61, -122, -70, -47, -70, -53, -128, 3, 60, 124, 122, 115, 42, 48, -21, -90, -49, -91, 30, 81, -6, 66, -19, 113, -59, -39, 82, -41, 20, 47, 8, -29, -83, -122, -73, 80, 127, 43, 115, -54, 2, 115, 19, 73, 110, 0})
                .readPoint();
//        System.err.println("First ECDH: " + Arrays.toString(new OtrOutputStream().writePoint(FIRST_ECDH_PUBLIC_KEY).toByteArray()));
//        final BigInteger firstDHPublicKey = FIRST_DH_PUBLIC_KEY;
        final BigInteger firstDHPublicKey = new OtrInputStream(new byte[] {0, 0, 1, -128, 122, -29, -46, -16, -3, 90, 101, 82, -109, -126, 45, 116, -13, -85, 111, 82, 103, 86, -85, -2, -47, -69, 92, 0, -35, -89, 82, -110, -55, 76, 37, 94, 41, -96, -15, -83, 80, -69, 94, 54, -31, 105, -92, 12, 83, 51, 95, -18, 125, -38, -33, -16, -63, -10, 23, -126, -117, 104, 92, 96, 95, -93, -84, -60, -3, -61, -35, -107, 37, -5, 124, 29, -81, 75, -49, 75, -91, 1, 83, -25, -85, -60, 52, -74, 35, 111, 54, 42, 84, -108, -77, 65, 49, -51, -20, -120, -54, -112, 84, 26, -30, -70, 100, 18, 107, 80, -34, 91, -56, 18, 93, -75, -58, 26, -112, 59, -41, -41, -106, 116, 92, -37, 120, 10, -69, -59, 109, -75, -4, 1, -96, 84, 96, 19, 70, -13, 68, 73, 60, -60, -111, 114, 118, 25, 104, 74, 126, 38, -44, -92, 122, -70, -114, 53, 108, 36, -61, 114, -50, -4, -128, -128, -5, 68, -49, -90, 116, 121, -44, -5, -127, 74, -12, 46, -127, -31, -75, -63, -25, -94, 109, -76, -61, 57, 68, 32, -87, -37, 37, 80, -125, 108, 127, 100, 111, -29, -74, 117, 56, -63, -65, -39, 127, -117, 50, 42, 89, 37, -14, -69, -72, 12, -102, 100, 59, -65, -32, 123, -88, -109, -39, 62, -110, -54, -114, 108, -68, -90, -127, -61, 105, 18, 9, 40, -112, 85, 29, -94, -68, 20, -43, 42, 84, -33, 10, -38, 51, 89, -97, -36, -52, 22, -69, 57, 54, 100, -122, -3, -5, 34, 119, -32, -23, -29, 112, 0, 64, -102, 77, 89, 107, -76, 44, 74, 50, 92, -118, 7, -101, -51, -114, 63, 4, 62, -109, 33, -55, -90, -37, 22, 22, 102, 110, -47, 20, 61, -60, 44, -33, 74, -64, 66, -100, -13, -124, -1, 81, 63, -65, -68, -81, -42, 96, -111, -66, 114, -20, -91, -110, -40, 41, 48, -104, 91, 103, -76, -4, 7, -115, 66, 122, 74, -110, -13, 53, 119, 31, 111, 94, -76, -120, -123, 17, 72, -101, -9, 33, 3, -13, 24, 62, -82, -89, 119, -116, 24, 40, -103, -126, 75, -62, -13, 78, -63, 36, -4, -41, 70, -78, -23, -47, 76, -122, 120, 87, -65, 1, 39, 81, -79, -108, 95, 93, 117})
                .readBigInt();
//        System.err.println("First DH: " + Arrays.toString(new OtrOutputStream().writeBigInt(firstDHPublicKey).toByteArray()));
        final AuthRMessage message = new AuthRMessage(SMALLEST_TAG, HIGHEST_TAG, payload, x, a, sigma,
                firstECDHPublicKey, firstDHPublicKey);
//        System.err.println("Result: " + Arrays.toString(new OtrOutputStream().write(message).toByteArray()));
        final byte[] expected = new byte[] {0, 4, 54, 0, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 16, 0, 99, -47, 79, -29, 95, 43, 21, 46, -9, -39, 103, 17, -104, 108, -64, 25, -8, -10, -103, 34, -52, 24, 14, -37, 72, -12, 16, 53, 1, 118, 93, 120, -113, -24, 105, -123, 108, -108, 34, 114, 121, -114, 97, 108, -1, 53, -112, 86, 10, 13, 41, -44, -88, -63, 57, -75, -128, 0, 3, 18, 0, -60, -89, -123, 6, 87, -53, 12, 51, -40, -6, -4, 110, 96, -34, 116, 115, 68, -79, -58, -61, 97, 57, -75, -94, -45, -1, -60, -9, -67, 8, 106, 9, -104, -52, 37, -16, 121, -65, -64, -127, -114, 10, -29, -115, 26, 29, -98, -25, 92, 110, 88, 100, 57, -104, 49, -28, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 96, -109, -37, 122, -15, -21, -71, -31, -59, 114, 72, 114, 19, -50, 67, -114, -91, -47, -33, -27, -104, -34, 29, 8, -26, 8, -98, -71, -24, -104, 1, 80, -99, -112, -98, 22, -41, 126, 75, 34, 85, -50, -9, -102, 24, -29, -12, -26, 121, 59, 25, 51, 100, 109, 10, -9, 73, -122, -98, -98, -71, -71, 58, 64, -125, 64, 96, -106, 40, 56, -3, 6, -28, -97, 87, -123, 39, -117, 72, 125, -74, -113, -45, 103, 2, -100, 78, 73, 49, -111, -98, -95, 92, 35, 113, 18, 120, 45, 47, -126, -18, -32, -97, -33, 11, 81, -98, 4, 57, -40, -79, 62, 111, 51, -15, -43, -75, -93, -38, -74, -31, -77, 77, -13, -63, -121, 89, 50, 0, 7, 0, 0, 0, 20, 23, 53, 52, -5, -7, -64, 108, -13, -128, -23, -111, 1, -35, 117, -32, -50, -95, 122, -39, -3, 0, 0, 0, 20, 97, -52, 9, -111, 58, -31, -21, -72, -27, -85, 53, 68, -109, 125, 116, 105, -76, 9, 122, -120, -85, 47, -15, -119, 113, 118, 86, 91, 69, -29, 89, -21, 90, 35, -30, -100, -66, -47, -48, -93, 84, -13, -59, -67, -6, 24, 110, -9, -83, 16, -90, -73, 58, -17, 14, 66, 91, 106, -109, -118, 125, 112, 55, -36, 15, -10, -7, 15, 16, 75, 95, -21, -43, 105, -96, -95, -128, 15, 3, -127, 66, 30, 38, -33, -108, -97, -115, 13, 113, -51, 116, -3, -44, 49, 53, -11, -117, -117, 2, 66, 37, 23, -11, -116, 110, -32, -71, -4, -108, 97, -22, 92, -49, -42, -92, -16, 19, 40, -41, 93, 71, 7, -60, -9, -124, -16, -69, 97, -6, -60, 48, 77, 57, 0, 6, 72, -16, -52, 32, 78, -115, -111, -61, -12, 48, -15, -9, -47, 12, 18, -53, 0, 91, 127, 38, 49, -82, 70, 17, -17, -73, 63, 9, -28, -11, -119, -92, 5, 29, 46, -39, -87, 102, 90, -8, 64, 95, -45, 52, 52, 81, 8, 103, -50, 76, 9, -85, -12, 37, 21, -128, 0, 0, 1, -128, 97, -89, 99, 35, 126, 23, 69, 75, 55, -45, 108, -99, 12, 52, -42, -22, 55, 13, 124, -97, 4, -42, -59, -46, -8, -43, 113, -109, -38, 65, -108, 46, 121, -89, -36, -123, -39, 41, -52, 108, 78, -128, 71, 22, 82, -10, -117, -93, -32, -119, 107, -66, -7, -29, -10, 112, 116, 85, -116, 63, -122, 8, 18, 68, -69, 53, 112, -109, -78, -103, 80, -12, 3, -104, 28, 43, -56, -44, -105, -127, 112, 58, -13, 15, -4, 52, 41, -9, 29, 90, 48, 67, -66, 103, -17, 63, -38, 93, 121, -86, -112, 98, 117, -28, -28, -62, 40, -75, 13, -72, -2, 119, 10, -97, -96, 119, 20, -11, 114, -34, -121, -73, 110, -107, -111, -106, 5, -4, -82, 63, 123, -119, 124, 44, -117, -76, 65, 49, -49, 33, -58, -92, 116, -55, -71, 122, -117, 15, -38, -97, -63, 6, -121, 98, 70, -69, 86, 41, 73, 96, 45, 95, 51, -92, -23, -69, 92, 46, 61, -32, 52, 0, -128, -4, -26, 16, 44, 127, -34, -84, 64, -65, -61, 37, -19, 3, -15, 53, -59, -8, 60, -57, 47, -28, 17, 34, 69, -61, 59, 34, -51, -2, 1, -122, 45, 23, 79, 65, 104, 58, -42, -33, -119, 127, -127, 113, -13, 36, 19, -87, 44, -109, -91, -110, -120, 4, 81, -102, -105, 65, 94, 26, -103, -106, -50, -10, -128, 78, 12, 48, -23, -33, 24, -36, -44, 48, 109, -2, -66, -40, 5, -62, 78, 55, -65, 77, 92, -109, -90, -41, 31, 58, 118, 35, -106, 7, 32, 45, -77, 127, -101, -114, 121, -1, -113, -37, 30, 59, 99, -30, -36, -99, 61, -84, -40, 80, 47, -71, 23, -74, -57, -35, 18, 71, -4, -36, 111, 44, -128, 46, -6, 121, 1, 83, 47, 2, 119, -33, -50, 36, 80, 92, -101, -47, 59, -77, -32, 120, -84, -126, 111, -1, -23, -48, 5, 101, -120, -40, -43, -83, 97, 108, 97, 96, -126, -99, -106, -70, -93, 96, -71, -91, 57, -71, 47, 2, -67, -50, -123, 64, -128, -9, 121, -63, -73, -82, 51, -76, 83, 99, -20, -54, -104, 38, 100, 85, 114, -85, 87, -95, 45, 59, 112, 34, -16, -69, 78, 114, -3, 66, -69, 82, -126, -58, 73, 109, 25, -111, -118, -45, -9, -59, 2, 117, 8, 47, -67, -61, 21, 54, 106, 41, -105, 108, 111, 126, 29, 82, -14, 44, -92, -23, 89, 66, 104, 79, -93, -70, 26, -125, -16, -121, 22, -76, -107, 120, 72, -19, 22, -6, 98, 89, -99, 87, -127, -128, -86, -23, -124, 56, 0, -84, -60, -90, -59, 12, 103, -75, -92, -7, -42, -122, -105, 87, 46, -47, 39, 124, -84, -1, -81, -21, -29, -123, -15, 116, 5, -29, -115, -111, 83, 58, -95, 36, 49, -102, 90, -56, -76, -79, -74, 7, 16, -84, -74, -67, 101, -107, -108, -21, -94, -119, 121, -31, 113, -118, 1, 0, -14, -71, 108, -80, 46, 127, 39, 94, -87, 4, 73, -63, -9, 91, -10, -29, -17, -4, 65, -11, -57, -126, 39, 48, -88, -19, -6, -104, 111, 10, 71, 82, 65, 111, -107, -128, 50, -126, -118, 85, 110, 125, 91, 10, -68, 29, 119, 3, -20, -72, -63, 27, -8, 61, 78, 57, 0, 107, -30, -42, -71, 0, -26, 91, 56, -54, -36, -35, -60, -3, -14, -117, -61, -87, 104, -69, 125, 1, 51, 20, 118, -29, -83, 49, 7, -60, -31, -21, 71, 0, 70, 55, -60, -93, 36, 85, -125, -29, 123, 89, 44, 5, 122, 99, -11, -73, 104, 5, 20, 2, -102, 79, 7, 0, -58, -114, -114, 110, -29, -55, 81, -33, 74, -103, -103, 71, 89, 98, 49, 44, 100, 67, -9, 37, -107, 84, -33, -125, -113, -66, 121, 111, 124, 99, -8, 105, 6, -126, 69, 0, -44, -70, 117, -48, -87, 126, 121, 19, 22, -4, 18, -99, -84, 70, 24, 27, -17, 46, 98, 45, 0, -94, 116, -9, -47, -36, 11, 127, 52, 50, -53, -13, -54, 55, -47, 24, -90, 7, -88, 38, -112, -56, 68, 93, -77, 92, -55, 56, 120, -122, -38, 3, 47, -112, 99, -40, -53, 107, 43, 52, -53, 68, 65, 73, -104, 101, -60, -97, -116, -34, 15, 84, -49, -14, 55, -8, 48, 0, 123, 68, -80, 102, 86, -38, -120, 58, 70, 9, 101, -61, -122, -70, -47, -70, -53, -128, 3, 60, 124, 122, 115, 42, 48, -21, -90, -49, -91, 30, 81, -6, 66, -19, 113, -59, -39, 82, -41, 20, 47, 8, -29, -83, -122, -73, 80, 127, 43, 115, -54, 2, 115, 19, 73, 110, 0, 0, 0, 1, -128, 122, -29, -46, -16, -3, 90, 101, 82, -109, -126, 45, 116, -13, -85, 111, 82, 103, 86, -85, -2, -47, -69, 92, 0, -35, -89, 82, -110, -55, 76, 37, 94, 41, -96, -15, -83, 80, -69, 94, 54, -31, 105, -92, 12, 83, 51, 95, -18, 125, -38, -33, -16, -63, -10, 23, -126, -117, 104, 92, 96, 95, -93, -84, -60, -3, -61, -35, -107, 37, -5, 124, 29, -81, 75, -49, 75, -91, 1, 83, -25, -85, -60, 52, -74, 35, 111, 54, 42, 84, -108, -77, 65, 49, -51, -20, -120, -54, -112, 84, 26, -30, -70, 100, 18, 107, 80, -34, 91, -56, 18, 93, -75, -58, 26, -112, 59, -41, -41, -106, 116, 92, -37, 120, 10, -69, -59, 109, -75, -4, 1, -96, 84, 96, 19, 70, -13, 68, 73, 60, -60, -111, 114, 118, 25, 104, 74, 126, 38, -44, -92, 122, -70, -114, 53, 108, 36, -61, 114, -50, -4, -128, -128, -5, 68, -49, -90, 116, 121, -44, -5, -127, 74, -12, 46, -127, -31, -75, -63, -25, -94, 109, -76, -61, 57, 68, 32, -87, -37, 37, 80, -125, 108, 127, 100, 111, -29, -74, 117, 56, -63, -65, -39, 127, -117, 50, 42, 89, 37, -14, -69, -72, 12, -102, 100, 59, -65, -32, 123, -88, -109, -39, 62, -110, -54, -114, 108, -68, -90, -127, -61, 105, 18, 9, 40, -112, 85, 29, -94, -68, 20, -43, 42, 84, -33, 10, -38, 51, 89, -97, -36, -52, 22, -69, 57, 54, 100, -122, -3, -5, 34, 119, -32, -23, -29, 112, 0, 64, -102, 77, 89, 107, -76, 44, 74, 50, 92, -118, 7, -101, -51, -114, 63, 4, 62, -109, 33, -55, -90, -37, 22, 22, 102, 110, -47, 20, 61, -60, 44, -33, 74, -64, 66, -100, -13, -124, -1, 81, 63, -65, -68, -81, -42, 96, -111, -66, 114, -20, -91, -110, -40, 41, 48, -104, 91, 103, -76, -4, 7, -115, 66, 122, 74, -110, -13, 53, 119, 31, 111, 94, -76, -120, -123, 17, 72, -101, -9, 33, 3, -13, 24, 62, -82, -89, 119, -116, 24, 40, -103, -126, 75, -62, -13, 78, -63, 36, -4, -41, 70, -78, -23, -47, 76, -122, 120, 87, -65, 1, 39, 81, -79, -108, 95, 93, 117};
        assertArrayEquals(expected, new OtrOutputStream().write(message).toByteArray());
    }

    private static Sigma generateSigma(final EdDSAKeyPair keypair, final byte[] message) {
        final ECDHKeyPair pair1 = ECDHKeyPair.generate(RANDOM);
        final ECDHKeyPair pair2 = ECDHKeyPair.generate(RANDOM);
        return ringSign(RANDOM, keypair, keypair.getPublicKey(), pair1.publicKey(), pair2.publicKey(), message);
    }
}