/*
 * otr4j, the open source java otr library.
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 *
 * SPDX-License-Identifier: LGPL-3.0-only
 */

package net.java.otr4j.messages;

import net.java.otr4j.api.ClientProfile;
import net.java.otr4j.api.InstanceTag;
import net.java.otr4j.api.Session.Version;
import net.java.otr4j.crypto.DSAKeyPair;
import net.java.otr4j.crypto.OtrCryptoException;
import net.java.otr4j.crypto.ed448.EdDSAKeyPair;
import net.java.otr4j.crypto.ed448.Point;
import net.java.otr4j.io.OtrInputStream;
import net.java.otr4j.io.OtrOutputStream;
import org.junit.Test;

import java.net.ProtocolException;
import java.security.SecureRandom;

import static java.util.Collections.singletonList;
import static net.java.otr4j.crypto.DSAKeyPair.generateDSAKeyPair;
import static net.java.otr4j.messages.ClientProfilePayload.readFrom;
import static net.java.otr4j.messages.ClientProfilePayload.signClientProfile;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assume.assumeFalse;

/*
 * NOTES:
 *
 * Encoded profile without DSA public key without DSA transitional signature: 0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0
 * Encoded profile without DSA public key with DSA transitional signature: 0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -27, 19, 30, 56, -108, 49, -50, 52, 28, 7, 105, 30, -117, -127, -73, -113, -71, 7, 47, 56, -58, 109, -16, 86, 85, 49, -25, -22, 33, 16, 52, -127, -33, 58, -113, -96, -61, 66, -128, 13, 78, 61, 86, 87, -126, 49, -94, -62, -104, -3, -97, 45, -97, 0, 7, 119, 0, 0, 3, 0, 18, -112, -97, -86, 98, -69, -56, -128, 98, -109, -64, 126, -34, -44, -28, -113, -106, 12, 100, 123, 124, 77, 7, 85, -51, -70, 114, -38, -121, -44, 68, -99, 12, 115, 83, 73, -97, -93, -29, -49, 95, 24, -83, -103, 90, -2, -42, 78, -46, 107, -103, -44, -35, 79, 80, -111, -61, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 7, 0, 0, 0, 20, -110, 86, 89, -5, 56, 104, -18, 60, -30, 51, 12, 124, -54, 107, -31, 60, -18, 102, -73, 111, 0, 0, 0, 20, 15, -64, -120, 12, 100, -79, -65, -89, -50, -66, 54, 69, 10, -79, 12, -2, -113, 30, 66, -126, -14, -36, -87, 50, -61, 28, 3, 116, 113, -117, 77, 58, -114, -104, 109, -55, -20, -123, -124, -25, 4, 67, -73, -68, 84, -19, 98, -110, -119, -114, -14, 120, 18, -63, 35, -62, 59, -58, -62, -109, 62, -97, -80, 26, -107, -28, 58, 112, 9, -23, 87, -62, -43, -44, -107, -19, -128, 114, 74, -63, -38, -111, 94, 90, -85, -10, 21, -4, -74, 70, 111, -60, 6, 90, 72, -3, 38, -102, -38, -104, -7, -56, -118, -16, -124, 34, 79, 60, -127, -31, 72, 103, 94, -66, 92, -113, 45, -74, 76, 20, -99, 120, 123, -59, 54, 1, 115, 109, 44, -37, 77, -126, 12, 0
 * Encoded profile with DSA public key with DSA transitional signature: 0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -18, 96, -39, -105, -32, 10, -94, -116, 75, 23, 1, 113, 84, -21, 61, 96, 100, 22, -94, 36, 77, -90, 46, -72, -86, -112, 39, -101, 74, 23, 90, 11, 50, 37, 94, -40, 0, -91, 15, 15, -113, 27, -87, -54, -127, 40, -75, 61, 67, 63, 50, -8, 75, 42, -110, -48, -128, 0, 3, 0, 18, -70, -59, -36, -3, -12, 58, -104, -32, -98, -30, -101, 43, 42, -35, 105, -96, 13, 90, 15, -41, 33, -93, -11, -2, -97, 86, 54, 98, 81, -123, 46, 114, -33, 32, -5, 116, 17, -88, 58, 5, -14, -98, -117, 19, 38, -104, -32, -10, -28, -87, 104, -21, -62, 98, -35, 12, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 79, 75, -20, -76, -106, 21, -21, 83, 60, 54, 12, -106, -50, -5, -96, -77, 15, -66, -101, 74, 25, 89, 78, -102, -4, -128, 51, 122, 114, 93, 18, 3, -97, 55, -117, 63, -128, -104, -24, 27, -38, 35, -82, -7, -50, -90, 11, 21, 84, 66, -88, 120, 2, -35, 69, -10, -105, -28, -4, 88, 66, -49, 111, -108, -93, 72, -3, -86, -101, -2, 25, 71, -97, 36, 46, 14, 127, -65, 16, 54, -69, 18, 42, 89, -110, -53, -60, -101, -26, -88, 56, 1, -123, -10, 54, 80, 60, -83, 117, 121, 89, -85, -120, -111, -37, 81, -77, 1, -86, 55, -58, -56, 47, -71, 67, 52, -94, 49, 94, -117, 126, 5, -67, -116, 50, -75, 9, -115, 0, 7, 0, 0, 0, 20, 52, -123, 27, -84, -91, -24, 58, 89, 81, 18, 63, 16, 103, 118, 21, -92, -22, -65, -65, 53, 0, 0, 0, 20, 61, 8, -78, 23, -23, -54, -6, -4, 50, 20, 99, 89, -114, -51, 101, 66, 107, -3, -22, -23, -11, -57, -47, 105, -101, -44, 14, -5, 44, 86, -9, 7, -105, 95, 92, -35, 5, 20, 59, 122, -120, -74, -100, -103, -77, -115, -84, 73, -9, -24, -100, -77, -7, -117, -115, -87, 54, 45, -99, -44, 104, -86, -21, 89, 114, 122, -96, -79, -98, 60, -22, -61, 107, 74, 45, -33, 0, -62, -94, 69, 0, -20, -30, -110, 30, 96, 7, -70, -100, 51, 111, 93, 93, -127, -113, -68, -30, -21, -31, -15, -60, -48, 124, -46, -82, 86, -36, 45, -70, 124, 70, -52, 83, 38, 116, 93, -90, 82, -13, 26, 57, -112, 38, -108, 92, -30, 99, -29, -115, 92, -67, -82, 24, 0
 */

@SuppressWarnings("ConstantConditions")
public final class ClientProfilePayloadTest {

    private static final SecureRandom RANDOM = new SecureRandom();

    private final InstanceTag tag = InstanceTag.SMALLEST_TAG;

    private final EdDSAKeyPair keypair = EdDSAKeyPair.generate(RANDOM);

    private final Point forgingKey = EdDSAKeyPair.generate(RANDOM).getPublicKey();

    private final DSAKeyPair dsaKeyPair = generateDSAKeyPair(RANDOM);

    @Test
    public void testConstructedPayloadIsReversible() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey,
                singletonList(Version.FOUR), null);
        assertEquals(profile, signClientProfile(profile, Long.MAX_VALUE / 1000, null, keypair).validate());
    }

    @Test
    public void testConstructedPayloadWithDSAIsReversible() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey,
                singletonList(Version.FOUR), this.dsaKeyPair.getPublic());
        assertEquals(profile, signClientProfile(profile, Long.MAX_VALUE / 1000, dsaKeyPair, keypair).validate());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConstructedPayloadWithDSAPublicKeyWithoutDSASignature() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey,
                singletonList(Version.FOUR), this.dsaKeyPair.getPublic());
        assertEquals(profile, signClientProfile(profile, Long.MAX_VALUE / 1000, null, keypair).validate());
    }

    @Test
    public void testConstructedPayloadWithoutDSAPublicKeyWithDSASignature() throws ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey,
                singletonList(Version.FOUR), null);
        assertEquals(profile, signClientProfile(profile, Long.MAX_VALUE / 1000, this.dsaKeyPair, keypair).validate());
    }

    @Test(expected = NullPointerException.class)
    public void testSignNullProfile() {
        signClientProfile(null, Long.MAX_VALUE / 1000, null, this.keypair);
    }

    @Test(expected = AssertionError.class)
    public void testSignProfileZeroTimestamp() {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey,
                singletonList(Version.FOUR), null);
        signClientProfile(profile, 0, null, this.keypair);
    }

    @Test(expected = NullPointerException.class)
    public void testSignNullKeypair() {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey,
                singletonList(Version.FOUR), null);
        signClientProfile(profile, Long.MAX_VALUE / 1000, null, null);
    }

    @Test
    public void testReadingWrittenClientProfilePayload() throws OtrCryptoException, ProtocolException, ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey, singletonList(Version.FOUR),
                null);
        final ClientProfilePayload payload = signClientProfile(profile, Long.MAX_VALUE / 1000, null, keypair);
        final ClientProfilePayload parsedPayload = readFrom(new OtrInputStream(new OtrOutputStream().write(payload).toByteArray()));
        assertEquals(payload, parsedPayload);
    }

    @Test
    public void testReadingWrittenClientProfilePayloadWithDSA() throws OtrCryptoException, ProtocolException, ValidationException {
        final ClientProfile profile = new ClientProfile(tag, keypair.getPublicKey(), forgingKey,
                singletonList(Version.FOUR), this.dsaKeyPair.getPublic());
        final ClientProfilePayload payload = signClientProfile(profile, Long.MAX_VALUE / 1000, this.dsaKeyPair, keypair);
        final ClientProfilePayload parsedPayload = readFrom(new OtrInputStream(new OtrOutputStream().write(payload).toByteArray()));
        assertEquals(payload, parsedPayload);
    }

    @Test
    public void testWriteClientProfilePayload() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        final OtrOutputStream out = new OtrOutputStream();
        readFrom(new OtrInputStream(input)).writeTo(out);
        assertArrayEquals(input, out.toByteArray());
    }

    @Test(expected = ProtocolException.class)
    public void testReadFieldMissingAccordingToInitialData() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTooFewFieldsAccordingToInitialData() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalInstanceTag() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 0, (byte) 0xff, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadIllegalTypeForEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 17, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = OtrCryptoException.class)
    public void testReadIllegalEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80 | 1, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = OtrCryptoException.class)
    public void testReadIllegalContentForEdDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, 92, 124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadIllegalTypeForForgingKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 17, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = OtrCryptoException.class)
    public void testReadIllegalContentForForgingKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -77, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadIllegalVersionStringTooLow() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 51, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadIllegalVersionStringTooHigh() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 59, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadModifedTimeStamp() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 31, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadOutdatedTimestamp() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 0, 0, 0, 0, 0, 0, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedSignature() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 15, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedSignatureRandomMutation() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        final int index = input.length - 114 + RANDOM.nextInt(114);
        final byte prev = input[index];
        input[index] = (byte) RANDOM.nextInt(255);
        assumeFalse("Random mutation made no actual change, so final result will be correct.", input[index] == prev);
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadInstanceTagFieldsWithZeroValue() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoInstanceTagFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingInstanceTagFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedLengthVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingVersionsString() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedFieldType() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 1, 2, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadZeroFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoForgingKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 3, 0, 18, -59, -76, 59, 124, -64, 85, 106, -14, 115, 46, -125, -77, -3, 8, -64, 40, 121, -65, -27, 121, -55, 98, -64, 12, 87, 2, -92, 37, -63, 100, -85, 81, 43, 82, 39, -127, -62, 77, -85, 107, 71, -66, 62, 48, -21, -31, 98, -124, -90, 98, -29, 91, -34, -119, -3, -11, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingForgingKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -80, 117, -92, -124, -52, 119, -75, -102, -128, -35, -102, 33, 49, 107, 58, -101, -89, -71, 93, -19, 26, -75, -39, 50, -11, -48, 0, -116, -29, 119, 57, -36, 123, 37, -110, -61, 74, 94, 68, -48, -120, 1, -26, -61, 50, 76, -25, 20, 56, 111, 61, -84, 99, -40, -82, -73, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 37, -66, -102, 61, -40, 28, 18, -4, -17, 116, -92, -103, 86, 109, 122, -6, 61, 56, -9, -12, 6, -58, 34, 13, -113, -127, 53, 114, -20, -68, 25, -103, 57, -14, 29, 85, 41, -45, -122, -36, 8, -80, 96, -100, -99, 90, 72, -61, -1, -82, 53, 109, -112, -63, -26, -124, 0, -49, -86, -38, -59, 39, 101, 66, 122, 73, -74, 59, 21, 8, 80, -52, -42, 76, 42, -62, -1, -104, 96, -106, 117, -43, -16, 75, 63, -24, 104, 114, 112, 78, -88, -40, -48, -62, -121, 67, 74, 84, 44, -24, 109, 49, 30, -27, 8, 113, -48, -91, 64, 104, -82, -112, 14, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ProtocolException.class)
    public void testReadUnsupportedDSAPublicKeyType() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -18, 96, -39, -105, -32, 10, -94, -116, 75, 23, 1, 113, 84, -21, 61, 96, 100, 22, -94, 36, 77, -90, 46, -72, -86, -112, 39, -101, 74, 23, 90, 11, 50, 37, 94, -40, 0, -91, 15, 15, -113, 27, -87, -54, -127, 40, -75, 61, 67, 63, 50, -8, 75, 42, -110, -48, -128, 0, 3, 0, 18, -70, -59, -36, -3, -12, 58, -104, -32, -98, -30, -101, 43, 42, -35, 105, -96, 13, 90, 15, -41, 33, -93, -11, -2, -97, 86, 54, 98, 81, -123, 46, 114, -33, 32, -5, 116, 17, -88, 58, 5, -14, -98, -117, 19, 38, -104, -32, -10, -28, -87, 104, -21, -62, 98, -35, 12, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 0, -128, 3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 79, 75, -20, -76, -106, 21, -21, 83, 60, 54, 12, -106, -50, -5, -96, -77, 15, -66, -101, 74, 25, 89, 78, -102, -4, -128, 51, 122, 114, 93, 18, 3, -97, 55, -117, 63, -128, -104, -24, 27, -38, 35, -82, -7, -50, -90, 11, 21, 84, 66, -88, 120, 2, -35, 69, -10, -105, -28, -4, 88, 66, -49, 111, -108, -93, 72, -3, -86, -101, -2, 25, 71, -97, 36, 46, 14, 127, -65, 16, 54, -69, 18, 42, 89, -110, -53, -60, -101, -26, -88, 56, 1, -123, -10, 54, 80, 60, -83, 117, 121, 89, -85, -120, -111, -37, 81, -77, 1, -86, 55, -58, -56, 47, -71, 67, 52, -94, 49, 94, -117, 126, 5, -67, -116, 50, -75, 9, -115, 0, 7, 0, 0, 0, 20, 52, -123, 27, -84, -91, -24, 58, 89, 81, 18, 63, 16, 103, 118, 21, -92, -22, -65, -65, 53, 0, 0, 0, 20, 61, 8, -78, 23, -23, -54, -6, -4, 50, 20, 99, 89, -114, -51, 101, 66, 107, -3, -22, -23, -11, -57, -47, 105, -101, -44, 14, -5, 44, 86, -9, 7, -105, 95, 92, -35, 5, 20, 59, 122, -120, -74, -100, -103, -77, -115, -84, 73, -9, -24, -100, -77, -7, -117, -115, -87, 54, 45, -99, -44, 104, -86, -21, 89, 114, 122, -96, -79, -98, 60, -22, -61, 107, 74, 45, -33, 0, -62, -94, 69, 0, -20, -30, -110, 30, 96, 7, -70, -100, 51, 111, 93, 93, -127, -113, -68, -30, -21, -31, -15, -60, -48, 124, -46, -82, 86, -36, 45, -70, 124, 70, -52, 83, 38, 116, 93, -90, 82, -13, 26, 57, -112, 38, -108, 92, -30, 99, -29, -115, 92, -67, -82, 24, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSASignatureComponent1() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -18, 96, -39, -105, -32, 10, -94, -116, 75, 23, 1, 113, 84, -21, 61, 96, 100, 22, -94, 36, 77, -90, 46, -72, -86, -112, 39, -101, 74, 23, 90, 11, 50, 37, 94, -40, 0, -91, 15, 15, -113, 27, -87, -54, -127, 40, -75, 61, 67, 63, 50, -8, 75, 42, -110, -48, -128, 0, 3, 0, 18, -70, -59, -36, -3, -12, 58, -104, -32, -98, -30, -101, 43, 42, -35, 105, -96, 13, 90, 15, -41, 33, -93, -11, -2, -97, 86, 54, 98, 81, -123, 46, 114, -33, 32, -5, 116, 17, -88, 58, 5, -14, -98, -117, 19, 38, -104, -32, -10, -28, -87, 104, -21, -62, 98, -35, 12, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 79, 75, -20, -76, -106, 21, -21, 83, 60, 54, 12, -106, -50, -5, -96, -77, 15, -66, -101, 74, 25, 89, 78, -102, -4, -128, 51, 122, 114, 93, 18, 3, -97, 55, -117, 63, -128, -104, -24, 27, -38, 35, -82, -7, -50, -90, 11, 21, 84, 66, -88, 120, 2, -35, 69, -10, -105, -28, -4, 88, 66, -49, 111, -108, -93, 72, -3, -86, -101, -2, 25, 71, -97, 36, 46, 14, 127, -65, 16, 54, -69, 18, 42, 89, -110, -53, -60, -101, -26, -88, 56, 1, -123, -10, 54, 80, 60, -83, 117, 121, 89, -85, -120, -111, -37, 81, -77, 1, -86, 55, -58, -56, 47, -71, 67, 52, -94, 49, 94, -117, 126, 5, -67, -116, 50, -75, 9, -115, 0, 7, 0, 0, 0, 20, -52, -123, 27, -84, -91, -24, 58, 89, 81, 18, 63, 16, 103, 118, 21, -92, -22, -65, -65, 53, 0, 0, 0, 20, 61, 8, -78, 23, -23, -54, -6, -4, 50, 20, 99, 89, -114, -51, 101, 66, 107, -3, -22, -23, -11, -57, -47, 105, -101, -44, 14, -5, 44, 86, -9, 7, -105, 95, 92, -35, 5, 20, 59, 122, -120, -74, -100, -103, -77, -115, -84, 73, -9, -24, -100, -77, -7, -117, -115, -87, 54, 45, -99, -44, 104, -86, -21, 89, 114, 122, -96, -79, -98, 60, -22, -61, 107, 74, 45, -33, 0, -62, -94, 69, 0, -20, -30, -110, 30, 96, 7, -70, -100, 51, 111, 93, 93, -127, -113, -68, -30, -21, -31, -15, -60, -48, 124, -46, -82, 86, -36, 45, -70, 124, 70, -52, 83, 38, 116, 93, -90, 82, -13, 26, 57, -112, 38, -108, 92, -30, 99, -29, -115, 92, -67, -82, 24, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadCorruptedDSASignatureComponent2() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -18, 96, -39, -105, -32, 10, -94, -116, 75, 23, 1, 113, 84, -21, 61, 96, 100, 22, -94, 36, 77, -90, 46, -72, -86, -112, 39, -101, 74, 23, 90, 11, 50, 37, 94, -40, 0, -91, 15, 15, -113, 27, -87, -54, -127, 40, -75, 61, 67, 63, 50, -8, 75, 42, -110, -48, -128, 0, 3, 0, 18, -70, -59, -36, -3, -12, 58, -104, -32, -98, -30, -101, 43, 42, -35, 105, -96, 13, 90, 15, -41, 33, -93, -11, -2, -97, 86, 54, 98, 81, -123, 46, 114, -33, 32, -5, 116, 17, -88, 58, 5, -14, -98, -117, 19, 38, -104, -32, -10, -28, -87, 104, -21, -62, 98, -35, 12, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 79, 75, -20, -76, -106, 21, -21, 83, 60, 54, 12, -106, -50, -5, -96, -77, 15, -66, -101, 74, 25, 89, 78, -102, -4, -128, 51, 122, 114, 93, 18, 3, -97, 55, -117, 63, -128, -104, -24, 27, -38, 35, -82, -7, -50, -90, 11, 21, 84, 66, -88, 120, 2, -35, 69, -10, -105, -28, -4, 88, 66, -49, 111, -108, -93, 72, -3, -86, -101, -2, 25, 71, -97, 36, 46, 14, 127, -65, 16, 54, -69, 18, 42, 89, -110, -53, -60, -101, -26, -88, 56, 1, -123, -10, 54, 80, 60, -83, 117, 121, 89, -85, -120, -111, -37, 81, -77, 1, -86, 55, -58, -56, 47, -71, 67, 52, -94, 49, 94, -117, 126, 5, -67, -116, 50, -75, 9, -115, 0, 7, 0, 0, 0, 20, 52, -123, 27, -84, -91, -24, 58, 89, 81, 18, 63, 16, 103, 118, 21, -92, -22, -65, -65, 53, 0, 0, 0, 20, -61, 8, -78, 23, -23, -54, -6, -4, 50, 20, 99, 89, -114, -51, 101, 66, 107, -3, -22, -23, -11, -57, -47, 105, -101, -44, 14, -5, 44, 86, -9, 7, -105, 95, 92, -35, 5, 20, 59, 122, -120, -74, -100, -103, -77, -115, -84, 73, -9, -24, -100, -77, -7, -117, -115, -87, 54, 45, -99, -44, 104, -86, -21, 89, 114, 122, -96, -79, -98, 60, -22, -61, 107, 74, 45, -33, 0, -62, -94, 69, 0, -20, -30, -110, 30, 96, 7, -70, -100, 51, 111, 93, 93, -127, -113, -68, -30, -21, -31, -15, -60, -48, 124, -46, -82, 86, -36, 45, -70, 124, 70, -52, 83, 38, 116, 93, -90, 82, -13, 26, 57, -112, 38, -108, 92, -30, 99, -29, -115, 92, -67, -82, 24, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoDSAPublicKeyFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 8, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -18, 96, -39, -105, -32, 10, -94, -116, 75, 23, 1, 113, 84, -21, 61, 96, 100, 22, -94, 36, 77, -90, 46, -72, -86, -112, 39, -101, 74, 23, 90, 11, 50, 37, 94, -40, 0, -91, 15, 15, -113, 27, -87, -54, -127, 40, -75, 61, 67, 63, 50, -8, 75, 42, -110, -48, -128, 0, 3, 0, 18, -70, -59, -36, -3, -12, 58, -104, -32, -98, -30, -101, 43, 42, -35, 105, -96, 13, 90, 15, -41, 33, -93, -11, -2, -97, 86, 54, 98, 81, -123, 46, 114, -33, 32, -5, 116, 17, -88, 58, 5, -14, -98, -117, 19, 38, -104, -32, -10, -28, -87, 104, -21, -62, 98, -35, 12, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 79, 75, -20, -76, -106, 21, -21, 83, 60, 54, 12, -106, -50, -5, -96, -77, 15, -66, -101, 74, 25, 89, 78, -102, -4, -128, 51, 122, 114, 93, 18, 3, -97, 55, -117, 63, -128, -104, -24, 27, -38, 35, -82, -7, -50, -90, 11, 21, 84, 66, -88, 120, 2, -35, 69, -10, -105, -28, -4, 88, 66, -49, 111, -108, -93, 72, -3, -86, -101, -2, 25, 71, -97, 36, 46, 14, 127, -65, 16, 54, -69, 18, 42, 89, -110, -53, -60, -101, -26, -88, 56, 1, -123, -10, 54, 80, 60, -83, 117, 121, 89, -85, -120, -111, -37, 81, -77, 1, -86, 55, -58, -56, 47, -71, 67, 52, -94, 49, 94, -117, 126, 5, -67, -116, 50, -75, 9, -115, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 79, 75, -20, -76, -106, 21, -21, 83, 60, 54, 12, -106, -50, -5, -96, -77, 15, -66, -101, 74, 25, 89, 78, -102, -4, -128, 51, 122, 114, 93, 18, 3, -97, 55, -117, 63, -128, -104, -24, 27, -38, 35, -82, -7, -50, -90, 11, 21, 84, 66, -88, 120, 2, -35, 69, -10, -105, -28, -4, 88, 66, -49, 111, -108, -93, 72, -3, -86, -101, -2, 25, 71, -97, 36, 46, 14, 127, -65, 16, 54, -69, 18, 42, 89, -110, -53, -60, -101, -26, -88, 56, 1, -123, -10, 54, 80, 60, -83, 117, 121, 89, -85, -120, -111, -37, 81, -77, 1, -86, 55, -58, -56, 47, -71, 67, 52, -94, 49, 94, -117, 126, 5, -67, -116, 50, -75, 9, -115, 0, 7, 0, 0, 0, 20, 52, -123, 27, -84, -91, -24, 58, 89, 81, 18, 63, 16, 103, 118, 21, -92, -22, -65, -65, 53, 0, 0, 0, 20, 61, 8, -78, 23, -23, -54, -6, -4, 50, 20, 99, 89, -114, -51, 101, 66, 107, -3, -22, -23, -11, -57, -47, 105, -101, -44, 14, -5, 44, 86, -9, 7, -105, 95, 92, -35, 5, 20, 59, 122, -120, -74, -100, -103, -77, -115, -84, 73, -9, -24, -100, -77, -7, -117, -115, -87, 54, 45, -99, -44, 104, -86, -21, 89, 114, 122, -96, -79, -98, 60, -22, -61, 107, 74, 45, -33, 0, -62, -94, 69, 0, -20, -30, -110, 30, 96, 7, -70, -100, 51, 111, 93, 93, -127, -113, -68, -30, -21, -31, -15, -60, -48, 124, -46, -82, 86, -36, 45, -70, 124, 70, -52, 83, 38, 116, 93, -90, 82, -13, 26, 57, -112, 38, -108, 92, -30, 99, -29, -115, 92, -67, -82, 24, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test
    public void testReadProfileWithTransitionalSignatureWithoutDSAPublicKey() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -27, 19, 30, 56, -108, 49, -50, 52, 28, 7, 105, 30, -117, -127, -73, -113, -71, 7, 47, 56, -58, 109, -16, 86, 85, 49, -25, -22, 33, 16, 52, -127, -33, 58, -113, -96, -61, 66, -128, 13, 78, 61, 86, 87, -126, 49, -94, -62, -104, -3, -97, 45, -97, 0, 7, 119, 0, 0, 3, 0, 18, -112, -97, -86, 98, -69, -56, -128, 98, -109, -64, 126, -34, -44, -28, -113, -106, 12, 100, 123, 124, 77, 7, 85, -51, -70, 114, -38, -121, -44, 68, -99, 12, 115, 83, 73, -97, -93, -29, -49, 95, 24, -83, -103, 90, -2, -42, 78, -46, 107, -103, -44, -35, 79, 80, -111, -61, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 7, 0, 0, 0, 20, -110, 86, 89, -5, 56, 104, -18, 60, -30, 51, 12, 124, -54, 107, -31, 60, -18, 102, -73, 111, 0, 0, 0, 20, 15, -64, -120, 12, 100, -79, -65, -89, -50, -66, 54, 69, 10, -79, 12, -2, -113, 30, 66, -126, -14, -36, -87, 50, -61, 28, 3, 116, 113, -117, 77, 58, -114, -104, 109, -55, -20, -123, -124, -25, 4, 67, -73, -68, 84, -19, 98, -110, -119, -114, -14, 120, 18, -63, 35, -62, 59, -58, -62, -109, 62, -97, -80, 26, -107, -28, 58, 112, 9, -23, 87, -62, -43, -44, -107, -19, -128, 114, 74, -63, -38, -111, 94, 90, -85, -10, 21, -4, -74, 70, 111, -60, 6, 90, 72, -3, 38, -102, -38, -104, -7, -56, -118, -16, -124, 34, 79, 60, -127, -31, 72, 103, 94, -66, 92, -113, 45, -74, 76, 20, -99, 120, 123, -59, 54, 1, 115, 109, 44, -37, 77, -126, 12, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadTwoDSASignatureFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 8, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -18, 96, -39, -105, -32, 10, -94, -116, 75, 23, 1, 113, 84, -21, 61, 96, 100, 22, -94, 36, 77, -90, 46, -72, -86, -112, 39, -101, 74, 23, 90, 11, 50, 37, 94, -40, 0, -91, 15, 15, -113, 27, -87, -54, -127, 40, -75, 61, 67, 63, 50, -8, 75, 42, -110, -48, -128, 0, 3, 0, 18, -70, -59, -36, -3, -12, 58, -104, -32, -98, -30, -101, 43, 42, -35, 105, -96, 13, 90, 15, -41, 33, -93, -11, -2, -97, 86, 54, 98, 81, -123, 46, 114, -33, 32, -5, 116, 17, -88, 58, 5, -14, -98, -117, 19, 38, -104, -32, -10, -28, -87, 104, -21, -62, 98, -35, 12, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 79, 75, -20, -76, -106, 21, -21, 83, 60, 54, 12, -106, -50, -5, -96, -77, 15, -66, -101, 74, 25, 89, 78, -102, -4, -128, 51, 122, 114, 93, 18, 3, -97, 55, -117, 63, -128, -104, -24, 27, -38, 35, -82, -7, -50, -90, 11, 21, 84, 66, -88, 120, 2, -35, 69, -10, -105, -28, -4, 88, 66, -49, 111, -108, -93, 72, -3, -86, -101, -2, 25, 71, -97, 36, 46, 14, 127, -65, 16, 54, -69, 18, 42, 89, -110, -53, -60, -101, -26, -88, 56, 1, -123, -10, 54, 80, 60, -83, 117, 121, 89, -85, -120, -111, -37, 81, -77, 1, -86, 55, -58, -56, 47, -71, 67, 52, -94, 49, 94, -117, 126, 5, -67, -116, 50, -75, 9, -115, 0, 7, 0, 0, 0, 20, 52, -123, 27, -84, -91, -24, 58, 89, 81, 18, 63, 16, 103, 118, 21, -92, -22, -65, -65, 53, 0, 0, 0, 20, 61, 8, -78, 23, -23, -54, -6, -4, 50, 20, 99, 89, -114, -51, 101, 66, 107, -3, -22, -23, 0, 7, 0, 0, 0, 20, 52, -123, 27, -84, -91, -24, 58, 89, 81, 18, 63, 16, 103, 118, 21, -92, -22, -65, -65, 53, 0, 0, 0, 20, 61, 8, -78, 23, -23, -54, -6, -4, 50, 20, 99, 89, -114, -51, 101, 66, 107, -3, -22, -23, -11, -57, -47, 105, -101, -44, 14, -5, 44, 86, -9, 7, -105, 95, 92, -35, 5, 20, 59, 122, -120, -74, -100, -103, -77, -115, -84, 73, -9, -24, -100, -77, -7, -117, -115, -87, 54, 45, -99, -44, 104, -86, -21, 89, 114, 122, -96, -79, -98, 60, -22, -61, 107, 74, 45, -33, 0, -62, -94, 69, 0, -20, -30, -110, 30, 96, 7, -70, -100, 51, 111, 93, 93, -127, -113, -68, -30, -21, -31, -15, -60, -48, 124, -46, -82, 86, -36, 45, -70, 124, 70, -52, 83, 38, 116, 93, -90, 82, -13, 26, 57, -112, 38, -108, 92, -30, 99, -29, -115, 92, -67, -82, 24, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test(expected = ValidationException.class)
    public void testReadMissingDSASignatureFields() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -9, 40, 58, -73, -127, -5, 56, 121, 15, 57, 18, 33, -80, 67, -83, -60, -96, -74, -103, -40, 72, 27, -102, 6, 112, 100, -24, -59, 96, -78, -44, 21, -24, 7, 41, -35, -112, -24, 126, 103, 108, 111, 51, 2, 85, -111, -104, -74, -52, 4, -74, 41, -13, 113, 2, -36, -128, 0, 3, 0, 18, 17, -65, 102, -22, -42, -19, -12, 35, 95, 51, -61, 48, -24, 80, -27, 78, 127, -18, 47, -79, -53, 27, 106, 45, 3, 25, -70, 53, -7, 11, -100, -67, 67, 31, -107, -110, 45, 113, 76, -119, 31, 37, 85, -113, -2, 117, 126, 57, -118, 77, -112, 107, 101, -25, -85, -97, 0, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 6, 0, 0, 0, 0, 1, 0, -113, 121, 53, -39, -71, -86, -23, -65, -85, -19, -120, 122, -49, 73, 81, -74, -13, 46, -59, -98, 59, -81, 55, 24, -24, -22, -60, -106, 31, 62, -3, 54, 6, -25, 67, 81, -87, -60, 24, 51, 57, -72, 9, -25, -62, -82, 28, 83, -101, -89, 71, 91, -123, -48, 17, -83, -72, -76, 121, -121, 117, 73, -124, 105, 92, -84, 14, -113, 20, -77, 54, 8, 40, -94, 47, -6, 39, 17, 10, 61, 98, -87, -109, 69, 52, 9, -96, -2, 105, 108, 70, 88, -8, 75, -35, 32, -127, -100, 55, 9, -96, 16, 87, -79, -107, -83, -51, 0, 35, 61, -70, 84, -124, -74, 41, 31, -99, 100, -114, -8, -125, 68, -122, 119, -105, -100, -20, 4, -76, 52, -90, -84, 46, 117, -23, -104, 93, -30, 61, -80, 41, 47, -63, 17, -116, -97, -6, -99, -127, -127, -25, 51, -115, -73, -110, -73, 48, -41, -71, -29, 73, 89, 47, 104, 9, -104, 114, 21, 57, 21, -22, 61, 107, -117, 70, 83, -58, 51, 69, -113, -128, 59, 50, -92, -62, -32, -14, 114, -112, 37, 110, 78, 63, -118, 59, 8, 56, -95, -60, 80, -28, -31, -116, 26, 41, -93, 125, -33, 94, -95, 67, -34, 75, 102, -1, 4, -112, 62, -43, -49, 22, 35, -31, 88, -44, -121, -58, 8, -23, 127, 33, 28, -40, 29, -54, 35, -53, 110, 56, 7, 101, -8, 34, -29, 66, -66, 72, 76, 5, 118, 57, 57, 96, 28, -42, 103, 0, 0, 0, 28, -70, -10, -106, -90, -123, 120, -9, -33, -34, -25, -6, 103, -55, 119, -57, -123, -17, 50, -78, 51, -70, -27, -128, -64, -68, -43, 105, 93, 0, 0, 1, 0, 22, -90, 92, 88, 32, 72, 80, 112, 78, 117, 2, -93, -105, 87, 4, 13, 52, -38, 58, 52, 120, -63, 84, -44, -28, -91, -64, 45, 36, 46, -32, 79, -106, -26, 30, 75, -48, -112, 74, -67, -84, -113, 55, -18, -79, -32, -97, 49, -126, -46, 60, -112, 67, -53, 100, 47, -120, 0, 65, 96, -19, -7, -54, 9, -77, 32, 118, -89, -100, 50, -90, 39, -14, 71, 62, -111, -121, -101, -94, -60, -25, 68, -67, 32, -127, 84, 76, -75, 91, -128, 44, 54, -115, 31, -88, 62, -44, -119, -23, 78, 15, -96, 104, -114, 50, 66, -118, 92, 120, -60, 120, -58, -115, 5, 39, -73, 28, -102, 58, -69, 11, 11, -31, 44, 68, 104, -106, 57, -25, -45, -50, 116, -37, 16, 26, 101, -86, 43, -121, -10, 76, 104, 38, -37, 62, -57, 47, 75, 85, -103, -125, 75, -76, -19, -80, 47, 124, -112, -23, -92, -106, -45, -91, 93, 83, 91, -21, -4, 69, -44, -10, 25, -10, 63, 61, -19, -69, -121, 57, 37, -62, -14, 36, -32, 119, 49, 41, 109, -88, -121, -20, 30, 71, 72, -8, 126, -5, 95, -34, -73, 84, -124, 49, 107, 34, 50, -34, -27, 83, -35, -81, 2, 17, 43, 13, 31, 2, -38, 48, -105, 50, 36, -2, 39, -82, -38, -117, -99, 75, 41, 34, -39, -70, -117, -29, -98, -39, -31, 3, -90, 60, 82, -127, 11, -58, -120, -73, -30, -19, 67, 22, -31, -17, 23, -37, -34, 0, 0, 1, 0, 87, 93, -40, -13, 36, 111, 36, -32, 7, 91, -2, 99, -5, 85, -25, -73, 73, -29, -69, 110, 83, -12, -126, 28, 103, 35, 106, 83, 83, -85, 74, -16, -57, -62, -34, -98, 50, -4, -96, -10, -81, -41, 62, -15, 88, 9, -8, -81, 102, -45, 109, -22, -47, 107, 15, -57, 84, -46, 6, -46, -94, -40, 41, 86, 97, 60, -101, -12, 114, 86, 66, 94, 120, -64, 120, -113, -57, 49, -83, 25, 55, -55, 87, -124, -125, -68, -101, -1, -20, 70, 67, 56, -109, 122, -10, -86, -70, -111, 105, -116, 18, -23, -90, -57, 85, -31, 27, -126, -49, -49, 125, -126, -127, -73, -128, -24, -2, -104, 34, 121, -58, -54, 125, 58, -39, -15, 124, 114, 5, 22, -125, -46, -81, -79, -17, -106, 65, 105, -16, -49, 110, 93, 113, 77, 108, 49, -11, 91, 19, 127, -11, -24, 49, -32, 44, 109, 3, 109, 10, -120, 43, -29, 64, -25, 78, -28, 83, -66, -43, 56, 5, 58, -82, 45, -118, -56, 110, 84, -6, -21, -113, 46, 75, 66, 105, 36, 120, -100, 125, 45, -62, -87, -38, -121, 92, 106, -99, 78, 4, 105, -92, -59, -63, 83, 9, -4, 115, -74, -48, 106, -59, 89, 60, -111, -125, 90, -96, -95, -40, 38, 44, 85, 127, -52, 87, -123, -26, 95, 45, -79, -31, -60, -21, -114, 52, -94, 61, -91, -22, 16, -123, -46, -73, -11, -78, -92, -117, 68, -78, 121, 33, -57, -74, -30, 109, 32, -81, -70, 32, -102, 101, -69, -79, 108, -92, 14, -94, -42, 116, -73, 83, -45, 27, -42, 38, 77, 84, -64, -81, -74, 66, 80, 118, -91, -81, -80, -74, 8, -16, -6, -53, -98, -69, 113, 17, -29, -28, -127, -117, 66, 6, -30, 22, -83, 60, 2, 45, 95, -126, 125, -99, -3, 0, -15, 127, -56, 120, 92, 33, 12, 112, 50, -82, 102, 108, -81, -24, -73, 107, -55, 113, 13, 44, 58, -67, 46, -14, -125, 47, 107, -43, 13, -3, 22, 109, 18, -36, 0, 0, 98, 99, -19, 37, -114, -45, 77, -117, 47, 122, -77, -79, 68, -110, -127, -54, 50, 79, 98, 37, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test
    public void testReadReorderedFieldsInProfile1() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 7, 0, 2, 0, 16, -33, -90, -50, 96, 50, -94, -119, 3, 14, 2, 116, -61, -16, -92, 37, -14, -94, 115, 64, -109, 123, -44, -84, -20, 118, -49, -11, -37, 20, -91, 5, -17, -22, -68, -119, 36, -32, -99, -74, -75, -107, -19, -98, 0, 114, -84, 120, -53, -8, -113, -84, -2, -80, 0, 78, -113, -128, 0, 1, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, -128, -3, 127, 83, -127, 29, 117, 18, 41, 82, -33, 74, -100, 46, -20, -28, -25, -10, 17, -73, 82, 60, -17, 68, 0, -61, 30, 63, -128, -74, 81, 38, 105, 69, 93, 64, 34, 81, -5, 89, 61, -115, 88, -6, -65, -59, -11, -70, 48, -10, -53, -101, 85, 108, -41, -127, 59, -128, 29, 52, 111, -14, 102, 96, -73, 107, -103, 80, -91, -92, -97, -97, -24, 4, 123, 16, 34, -62, 79, -69, -87, -41, -2, -73, -58, 27, -8, 59, 87, -25, -58, -88, -90, 21, 15, 4, -5, -125, -10, -45, -59, 30, -61, 2, 53, 84, 19, 90, 22, -111, 50, -10, 117, -13, -82, 43, 97, -41, 42, -17, -14, 34, 3, 25, -99, -47, 72, 1, -57, 0, 0, 0, 20, -105, 96, 80, -113, 21, 35, 11, -52, -78, -110, -71, -126, -94, -21, -124, 11, -16, 88, 28, -11, 0, 0, 0, -128, -9, -31, -96, -123, -42, -101, 61, -34, -53, -68, -85, 92, 54, -72, 87, -71, 121, -108, -81, -69, -6, 58, -22, -126, -7, 87, 76, 11, 61, 7, -126, 103, 81, 89, 87, -114, -70, -44, 89, 79, -26, 113, 7, 16, -127, -128, -76, 73, 22, 113, 35, -24, 76, 40, 22, 19, -73, -49, 9, 50, -116, -56, -90, -31, 60, 22, 122, -117, 84, 124, -115, 40, -32, -93, -82, 30, 43, -77, -90, 117, -111, 110, -93, 127, 11, -6, 33, 53, 98, -15, -5, 98, 122, 1, 36, 59, -52, -92, -15, -66, -88, 81, -112, -119, -88, -125, -33, -31, 90, -27, -97, 6, -110, -117, 102, 94, -128, 123, 85, 37, 100, 1, 76, 59, -2, -49, 73, 42, 0, 0, 0, -128, 62, -73, 18, 27, 2, 117, 74, -41, 17, -72, -88, 36, -4, -120, 105, 74, -126, -109, -101, -89, 108, -54, 59, 4, -1, -3, -46, 42, -108, -54, -63, 24, 79, -87, 37, 107, 3, -30, 15, -33, -128, 97, 50, 125, -25, -81, -112, -15, 15, -35, 8, 97, 125, 71, -84, 96, -60, 8, 28, 65, -128, -78, 50, -39, 93, 31, -116, -6, 33, 107, 126, -45, -41, -40, -13, -7, 41, -55, -65, 45, 1, 32, 10, 61, -8, -43, -60, -111, 85, -1, -79, 97, 35, 84, 95, 109, 94, -93, -70, 123, 29, 50, -68, 20, -74, -120, -45, 11, -126, 94, -58, -105, -116, 107, -25, -36, -80, 80, -59, -108, -6, -72, 42, -1, 89, -45, 120, 74, 0, 3, 0, 18, 112, 127, 38, -30, 13, -12, 32, 66, -47, 68, -30, 18, -53, 94, 109, 110, 64, -46, -1, 67, 84, 47, 76, -30, 31, 88, 30, 119, -107, -34, -118, -40, -123, 64, 4, -71, 115, 107, -124, 124, 23, 3, -8, 17, 58, 17, -57, 17, 92, 71, 4, -53, -93, -82, 104, 18, -128, 0, 4, 0, 0, 0, 1, 52, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 7, 0, 0, 0, 20, 58, 89, 44, 90, 85, 0, 11, -42, 10, -54, -89, 107, 30, 51, -41, -97, -37, 106, -21, -63, 0, 0, 0, 20, 123, -3, 55, 31, -11, -119, 71, 19, -52, 65, -93, -92, -66, -57, -23, -100, 62, -100, 96, 52, 102, -124, -120, -95, 48, -107, -90, 107, 79, 99, -77, 0, -23, 88, 111, -96, 46, 83, 98, -124, -73, -113, 103, -28, -19, -71, -75, 75, -125, 8, -69, 94, -17, 58, 44, 24, 10, -31, -3, 84, -73, -73, 124, -57, -42, -125, -15, 32, -7, -122, 93, -55, -33, 76, -110, 52, -128, -14, -9, 78, 95, 49, -72, 107, 126, 15, 122, -95, 100, -97, -117, -118, -65, 80, -88, -123, -108, 27, 116, 103, -54, 51, -37, 19, 35, 26, -110, 45, -98, -6, 125, 37, -87, -49, 56, 79, -50, 19, 37, -59, 19, -95, 44, 32, -106, 98, 5, -4, -116, 118, 8, 3, 59, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test
    public void testReadReorderedFieldsInProfile2() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 6, 0, 4, 0, 0, 0, 1, 52, 0, 3, 0, 18, 107, 89, 45, -106, 12, 90, -71, 49, -99, 12, 23, 12, -64, -88, 0, 15, 83, 72, -63, 41, -67, -25, -71, -49, 90, 7, -55, 51, 32, 32, 65, 19, -17, 65, -127, 52, 79, 61, -93, -104, 19, 29, -7, -103, 61, -76, -99, -18, 67, 33, 93, -87, 98, -114, 90, 27, 0, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 1, 0, 0, 1, 0, 0, 2, 0, 16, -104, 85, 114, -53, -73, 65, 72, -101, 40, 73, 120, 125, -48, -124, -99, 7, -88, 94, 112, -101, -41, -15, 14, 15, -106, 64, -58, 107, 120, -123, -117, 124, -81, -79, 45, 26, -53, -41, 97, 29, -80, 37, -85, -123, -82, 115, -42, -30, -88, -119, 43, -68, 117, 23, 26, -53, 0, 0, 7, 0, 0, 0, 20, 72, 31, 0, 36, -59, 108, -109, -20, -36, 20, 17, 67, 112, 76, -111, -97, 53, -51, -125, -27, 0, 0, 0, 20, 100, 32, 10, 32, -64, -50, 0, -113, -102, 118, -19, 57, -57, -38, 36, -49, 122, 127, -59, -23, 12, 125, 28, -6, 18, 87, -45, -18, 62, 118, -127, -83, -104, -80, -20, -49, 53, -35, 44, -15, 10, -20, 21, 24, 17, 97, 67, -116, -1, 67, 58, 79, 55, -121, 126, 70, 9, -84, -69, -103, 42, 27, -103, -70, -84, 72, -23, -70, 45, 44, 97, -72, -116, 47, -124, -44, 0, 125, 76, -2, 47, 74, -126, 59, 90, 49, -52, -37, 75, 84, -120, -25, -111, -109, -96, 101, 77, -30, -28, -40, 118, -50, -40, 99, 93, -118, -123, 68, 81, 123, -70, 56, 95, 2, 84, -59, 57, -112, -20, -122, -91, -118, 58, -10, -57, 84, -23, -21, -16, 10, -59, 41, 41, 0};
        readFrom(new OtrInputStream(input));
    }

    @Test
    public void testReadReorderedFieldsInProfile3() throws OtrCryptoException, ProtocolException, ValidationException {
        final byte[] input = new byte[] {0, 0, 0, 5, 0, 5, 0, 32, -60, -101, -91, -29, 83, -9, 0, 3, 0, 18, -89, 7, -57, 30, -5, -32, -76, 78, -42, -91, -7, 90, 119, -57, -41, -35, 51, -9, 71, 25, -106, 105, -42, -86, -19, -11, 39, -86, -6, 46, -115, -56, -17, 46, 97, 77, -30, 45, -17, -119, 105, -54, -60, -100, 15, -125, -54, 43, -27, -8, 52, -4, 108, -44, 25, 124, -128, 0, 2, 0, 16, -62, 115, -34, -32, 17, -118, -18, -21, 79, -25, -16, -127, 53, -44, -48, -6, 101, -73, -2, -68, 9, 37, -113, 44, -85, 94, -100, -122, -107, -40, 81, 61, 60, -12, -61, -27, -70, 105, 58, 1, -111, 35, 116, 122, -124, 14, 34, -61, -81, 24, 67, -114, -37, -107, 116, 8, -128, 0, 1, 0, 0, 1, 0, 0, 4, 0, 0, 0, 1, 52, 7, 42, -32, 5, 65, 111, 7, 10, -96, -7, -66, -45, -126, -3, 107, 72, 76, 37, -73, 123, -19, -49, -8, -27, 88, -60, 2, -72, -35, 123, 69, 44, 17, 1, 58, 48, 54, 123, -44, -58, 84, 111, -21, -89, -42, 45, 27, -17, 34, 127, 21, 76, 122, -83, 42, -101, 0, 32, 32, 2, 115, -109, -61, -56, 41, 75, 96, 114, 101, -121, -95, 6, -60, -61, 33, 99, -9, 53, 104, 6, -90, 113, 44, -95, 50, 120, 46, -98, 95, -52, 60, -114, 96, -16, 65, -95, 114, -50, 81, -94, -18, -50, -35, 107, 82, -60, 54, -46, 35, -40, 110, 52, 51, 0};
        readFrom(new OtrInputStream(input));
    }
}